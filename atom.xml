<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老司机种菜</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wodekouwei.com/"/>
  <updated>2019-03-01T06:30:35.766Z</updated>
  <id>http://wodekouwei.com/</id>
  
  <author>
    <name>轻口味</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件架构思考</title>
    <link href="http://wodekouwei.com/2019/03/01/tips-engineering/"/>
    <id>http://wodekouwei.com/2019/03/01/tips-engineering/</id>
    <published>2019-03-01T06:07:48.000Z</published>
    <updated>2019-03-01T06:30:35.766Z</updated>
    
    <content type="html"><![CDATA[<p>架构是对工程整体结构与组件的抽象描述，是软件工程的基础骨架。架构在工程层面不分领域，且思想是通用的。引用维基百科对于软件架构的定义：</p>
<blockquote>
<p>软件体系结构是构建计算机软件实践的基础。与建筑师设定建筑项目的设计原则和目标，作为绘图员画图的基础一样，软件架构师或者系统架构师陈述软件架构以作为满足不同客户需求的实际系统设计方案的基础。从和目的、主题、材料和结构的联系上来说，软件架构可以和建筑物的架构相比拟。一个软件架构师需要有广泛的软件理论知识和相应的经验来实施和管理软件产品的高级设计。软件架构师定义和设计软件的模块化，模块之间的交互，用户界面风格，对外接口方法，创新的设计特性，以及高层事物的对象操作、逻辑和流程。</p>
</blockquote>
<p>架构的合理设计可以解决面对复杂系统时可能面临的很多问题，例如：</p>
<ol>
<li>业务边界与模块职责划分问题</li>
<li>代码权限控制问题（数据库不应直接被业务方调用）</li>
<li>代码重复，逻辑分支多，坏味道多的问题</li>
<li>由于考虑不周，可能存在隐藏bug</li>
<li>修改一个逻辑需要修改N个地方代码逻辑</li>
</ol>
<p>移动端通用架构:</p>
<ol>
<li>Toolkit/ToolkitSDK module :工具类及与工具类相关的SDK的集合。工具类属于工程架构里最基础的模块，提供了通用的方法与工具类服务（工具类服务是指可以被抽象成一个独立的与业务无关的基础服务，如缓存、数据库操作等）。工具类通常作为最底层的module，被其他所有模块引用。</li>
<li>基础组件库/基础组件库module:基础组件库提供与业务相关的基础组件，是构建一个移动端应用所需要的通用组件的集合。它与工具类的区别在于基础组件库可能会包含少量业务逻辑代码，是无法拆分给其他应用使用的；另一方面，基础组件库是基础服务接口的实现，是不对业务层暴露的，避免了业务层与基础SDK打交道，有利于整体替换底层基础框架的实现（例如Volley替换为OkHttp、Fresco替换为Glide）</li>
<li>基础服务接口/业务服务接口module:基础服务接口声明了一组通用的基础服务，业务层通过基础服务接口获取基础服务，如网络请求、图片加载等。业务服务接口声明了一组该模块提供给其他模块的服务，业务之间的通信也是通过服务接口来完成的。例如首页模块需要获取购物车的商品数量，首先通过服务调度中心获取购物车的服务接口，再通过服务接口调用购物车获取商品数量的接口方法即可。</li>
<li>服务调度中心module:服务调度中心，是一个接口收集与管理的容器。服务调度中心将所有基础服务接口与业务接口收集起来，通过一定的方式与它们的实现类进行绑定。所有的业务都需要通过服务调度中心才能够获取到服务。服务的注册与发现和Spring容器的IoC思想是类似的</li>
<li>业务module:务层是每个业务的具体实现的集合。业务层的业务之间是没有直接引用关系的，业务层提供了业务服务接口中暴露的服务的具体实现。业务之间的通信需要通过服务调度中心获取其他业务的服务接口。</li>
</ol>
<p>后端通用架构:</p>
<ol>
<li>展示层（View）:展示层是系统与用户打交道的地方，提供与用户交互的界面。对于用户而言，只有展示层是可见的、可操作的。展示层对于某些工程来说不是必须的，例如提供纯后台服务的工程。</li>
<li>控制层（Controller）:主要负责与Model和View打交道，但同时又保持其相对独立。Controller决定使用哪些Model，对Model执行什么操作，为视图准备哪些数据，是MVC中沟通的桥梁。在Controller层提供了http服务供展示层调用。在依赖管理中，控制层需要依赖服务层提供服务。</li>
<li>服务层（Service/Facade）:服务层是业务逻辑实现的地方，上层需要使用的功能都在服务层来实现具体的业务逻辑。服务层就是将底层的数据通过一定的条件和方式进行数据组装并提供给上层调用。服务层可以拆分为业务接口和业务实现，业务实现可以对外部隐藏。在投放工程中，控制层既依赖了业务接口，又依赖了业务实现。后面的改造我们可以看到，编译期红色线依赖是完全没有必要的。服务层需要依赖数据关系映射层与持久层的数据打交道。</li>
<li>对象关系映射层（ORM）:对象关系映射层的作用是在持久层和业务实体对象之间作一层数据实体的映射，这样在具体操作业务对象时，只需简单的操作对象的属性和方法，不需要去和复杂的SQL语句打交道。ORM使得业务不需要关心底层数据库的任何细节，包括使用的数据库类型、数据库连接与释放细节等。对象关系映射层只依赖数据服务层提供服务。</li>
<li>数据服务层（Data Server）:数据服务就是提供数据源的地方。数据服务可以提供持久化数据及缓存数据。持久，即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的数据存储在关系型的数据库中，当然也可以存储在磁盘文件中、XML数据文件中等等。而缓存是将信息（数据或页面）放在内存中以避免频繁的数据库存储或执行整个页面的生命周期，直到缓存的信息过期或依赖变更才再次从数据库中读取数据或重新执行页面的生命周期。数据服务层是数据源头，处于架构的最底层。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;架构是对工程整体结构与组件的抽象描述，是软件工程的基础骨架。架构在工程层面不分领域，且思想是通用的。引用维基百科对于软件架构的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件体系结构是构建计算机软件实践的基础。与建筑师设定建筑项目的设计原则和目标，作为绘图员画图的基础一
    
    </summary>
    
      <category term="tips" scheme="http://wodekouwei.com/categories/tips/"/>
    
    
      <category term="tips" scheme="http://wodekouwei.com/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>android自动化测试(三):常见问题</title>
    <link href="http://wodekouwei.com/2019/02/28/at-android-issue/"/>
    <id>http://wodekouwei.com/2019/02/28/at-android-issue/</id>
    <published>2019-02-28T09:36:00.000Z</published>
    <updated>2019-02-28T09:46:55.985Z</updated>
    
    <content type="html"><![CDATA[<p>####### 1.appium执行登录按钮的click在华为(FRD-AL10)手机上执行完不起作用
最开始怀疑是因为输入法遮挡,后来调用hide_keyboard后无法隐藏键盘(在三星手机Samsung SM-N9200上调用hide_keyboard会抛异常,华为手机不显示输入法调用也没有问题),最后在设置-系统设置-语言和输入法中关闭”安全输入”,软件盘就不再弹出了,但是还是执行完不生效,最后appium中指定automationName=UiAutomator2,使用UiAutomator2后该问题得到解决.</p>
<p>有人说需要打开安全设置中的”允许模拟点击”,但是并没有找到这个开关</p>
<p>注意:元素必须先出现在页面上，才可以使用click/tap方法。所以需要先使用isDisplay()方法判读该元素出现， 然后点击该元素。但是有可能即使isDisplay()返回的结果为true， 该元素还会因为不可见而点击报错。因为虽然该元素的isDisplay()返回了true，但是该元素的中心点可能仍然不在屏幕上。 tap方法其实点击的就是元素的中心点。可以使用swipe方法再滑动一下屏幕让这个元素完全显示在屏幕上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####### 1.appium执行登录按钮的click在华为(FRD-AL10)手机上执行完不起作用
最开始怀疑是因为输入法遮挡,后来调用hide_keyboard后无法隐藏键盘(在三星手机Samsung SM-N9200上调用hide_keyboard会抛异常,华为手机
    
    </summary>
    
      <category term="autotest" scheme="http://wodekouwei.com/categories/autotest/"/>
    
    
      <category term="android" scheme="http://wodekouwei.com/tags/android/"/>
    
      <category term="autotest" scheme="http://wodekouwei.com/tags/autotest/"/>
    
      <category term="tools" scheme="http://wodekouwei.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>at-android-appium-introduce</title>
    <link href="http://wodekouwei.com/2019/02/28/at-android-appium-introduce/"/>
    <id>http://wodekouwei.com/2019/02/28/at-android-appium-introduce/</id>
    <published>2019-02-28T03:45:15.000Z</published>
    <updated>2019-02-28T03:45:41.084Z</updated>
    
    <content type="html"><![CDATA[<p>Appium UiAutomator2 Server 运行原理分析
<a href="https://testerhome.com/topics/9240" target="_blank" rel="external">https://testerhome.com/topics/9240</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Appium UiAutomator2 Server 运行原理分析
&lt;a href=&quot;https://testerhome.com/topics/9240&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://testerhome.com/topi
    
    </summary>
    
      <category term="autotest" scheme="http://wodekouwei.com/categories/autotest/"/>
    
    
      <category term="android" scheme="http://wodekouwei.com/tags/android/"/>
    
      <category term="autotest" scheme="http://wodekouwei.com/tags/autotest/"/>
    
      <category term="tools" scheme="http://wodekouwei.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>android自动化测试(N):UiAutomator用法</title>
    <link href="http://wodekouwei.com/2019/02/28/at-android-uiautomator-usage/"/>
    <id>http://wodekouwei.com/2019/02/28/at-android-uiautomator-usage/</id>
    <published>2019-02-28T03:09:22.000Z</published>
    <updated>2019-02-28T04:14:42.449Z</updated>
    
    <content type="html"><![CDATA[<p>它是一个Android自动化测试框架，是谷歌在Android4.1版本发布时推出的一款用Java编写的UI测试框架。它只能用于UI也就是黑盒方面的测试。所以UiAutomator只能运行在4.1以后的版本中。其最大的特点就是可以跨进程操作，我们可以使用uiautomator框架提供的一些方便的API来对安卓应用进行一系列的自动化测试操作，如点击、滑动、键盘输入、长按以及常用的断言方法等。可以替代以前繁琐的手工测试。</p>
<p>下面总结一下该框架的几个优点：</p>
<ol>
<li>Google自家推出的，其稳定性和后续的维护更新可以得到保障，运行时也有更多的权限。</li>
<li>可以跨进程操作，这点比起其它基于instrumentation框架的自动化工具如Robotium是无法直接做到的。</li>
<li>运行速度快。
缺点：</li>
<li>不支持Android4.1以下的版本。</li>
<li>不支持Webview，所以一般无法对浏览器应用进行测试。</li>
</ol>
<h6 id="UiAutomator-框架原理分析："><a href="#UiAutomator-框架原理分析：" class="headerlink" title="UiAutomator 框架原理分析："></a>UiAutomator 框架原理分析：</h6><p>首先，UiAutomator是Google参考微软的UiAutomation提供的一套用在Android上的自动化测试框架。基于Android AccessilibilityService提供。那么至于什么是AccessilibilityService，在这里简单介绍下：Android AccessilibilityService，是一个可访问服务，它是一个为增强用户界面并帮助残疾用户的应用程序，或者用户可能无法完全与设备的交互。举个简单的例子，假如一个用户在开车。那么用户就有可能需要添加额外的或者替代的用户反馈方式。其应用方式一般有两种：</p>
<p>第一种方法是：UiAutomatorView + monkey。它与hierachyview + monkey差不多。其区别是：UiAutomatorView通过ADB向设备侧发送一个dump命令，而不是建立一个socket，下载一个包含当前界面控件布局信息的xml文件。相比较hierachyview下载的内容而言，该文件小很多。因此，从效率上讲，这种方法比第一种应用模式快很多。</p>
<p>第二种方法是： 直接调用UiAutomator框架对外提供的API，主要有UiDevice、UiSelector、UiObject和 UiScrollable等。其原理与第一种方式即HierachyView + Monkey差不多。其过程大致是：首先，UiAutomator测试框架通过Accessibilityservice，获取当前窗口的控件层次关系及属性信息，并查找到目标控件。若是点击事件，则计算出该控件的中心点坐标。其次，UiAutomator通过 InputManager.getInstance().injectInputEvent隐藏接口来注入用户事件（点击、输入类操作），从而实现跨进程自动化的目的。</p>
<p>UiAutomatorTestCase ：这个类是继承自Junit TestCase （Junit），对外提供setup、teardown等，以便初始化用例、清除环境等。所以我们在编写的UiAutomator 的脚本时一般都要继承这个类，这样就可以直接使用它的一些方法和Junit单元测试框架中的Assert断言机制。</p>
<h6 id="UIAutomator2-0"><a href="#UIAutomator2-0" class="headerlink" title="UIAutomator2.0"></a>UIAutomator2.0</h6><p>We’re pleased to announce the release of UIAutomator 2.0! This version is a significant update from the previous release. Most importantly, UI Automator is now based on Android Instrumentation and you can build and run tests with the ‘./gradlew connectedCheck’ command.</p>
<p>UiAutomator2.0的jar包并不是在以前SDK/platforms/android-19/下。现在我们要这么做</p>
<ol>
<li>通过Android SDK Manager中的 Android Support Repository 项进行安装</li>
<li>下载下来的jar包的路径为/extras/android/m2repository</li>
<li>新建一个android项目，编写一个简单的应用</li>
<li><p>在build.gradle中配置依赖项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  androidTestCompile &apos;com.android.support.test:runner:0.3&apos;</div><div class="line">  // Set this dependency to use JUnit 4 rules</div><div class="line">  androidTestCompile &apos;com.android.support.test:rules:0.3&apos;</div><div class="line">  // Set this dependency to build and run Espresso tests</div><div class="line">  androidTestCompile &apos;com.android.support.test.espresso:espresso-core:2.2&apos;</div><div class="line">  // Set this dependency to build and run UI Automator tests</div><div class="line">  androidTestCompile &apos;com.android.support.test.uiautomator:uiautomator-v18:2.1.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>设置AndroidJunitRunner为默认的testInstrumentationRunner</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写测试代码，在androidTest目录下面新建测试类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class LoginTest extends InstrumentationTestCase &#123;</div><div class="line"></div><div class="line">    protected UiDevice device = null;</div><div class="line">    protected String appName = &quot;magicCard&quot;;</div><div class="line"></div><div class="line">    public void runApp(String appName) throws UiObjectNotFoundException, RemoteException &#123;</div><div class="line">        device = UiDevice.getInstance(getInstrumentation());</div><div class="line">        device.pressHome();</div><div class="line">        device.waitForWindowUpdate(&quot;&quot;, 2000);</div><div class="line"></div><div class="line">        UiObject2 allAppsButton = device.findObject(By.desc(&quot;Apps&quot;));</div><div class="line">        allAppsButton.click();</div><div class="line">        device.waitForWindowUpdate(&quot;&quot;, 2000);</div><div class="line"></div><div class="line">        UiScrollable appViews = new UiScrollable(new UiSelector().scrollable(true));</div><div class="line">        appViews.setAsHorizontalList();</div><div class="line"></div><div class="line">        UiObject settingsApp = appViews.getChildByText(new UiSelector().className(TextView.class.getName()), appName);</div><div class="line">        settingsApp.clickAndWaitForNewWindow();</div><div class="line"></div><div class="line">        assertTrue(&quot;Unable to detect app&quot;, settingsApp != null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setUp() throws RemoteException, UiObjectNotFoundException &#123;</div><div class="line">        this.runApp(appName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void tearDown() throws RemoteException, UiObjectNotFoundException &#123;</div><div class="line">        //Empty for the moment</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void testUS1() &#123;</div><div class="line">        UiObject2 usernameLabel = device.findObject(By.clazz(TextView.class.getName()).text(&quot;Username&quot;));</div><div class="line">        assertTrue(&quot;Username label not found&quot;, usernameLabel != null);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>基于Instrument的方便一点就是不需要remote debug的方式进行调试。并且做参数化之类的也方便了很多。
2.0不用再继承UiAutomatorTestCase，但却需要继承InstrumentationTestCase。</p>
<p>获取设备的方式也变化了，UiDevice.getInstance(getInstrumentation()) 这才是正确的使用方法。之前常用的两种方式都不再可行。</p>
<p>可以通过如下的adb命令调用
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am instrument -w -r   -e debug false -e class com.cxq.uiautomatordemo.UiTest com.cxq.uiautomatordemo.test/android.test.InstrumentationTestRunner</div></pre></td></tr></table></figure></p>
<p>在dependencies中用到了compile、testCompile、androidTestCompile三种依赖方式，让我们来看看他们有什么区别：</p>
<p>compile：参与编译，并且会打包到debug/release apk中。
testCompile：只参与单元测试编译，不会打包到debug/release apk包中，不需要设备支持。
androidTestCompile：只参与UI测试编译，不会打包到debug/release apk包中，需要设备支持。</p>
<p>除此之外还有Provided、APK、Debug compile和Release compile：</p>
<p>Provided：只参与编译，不会打包到debug/release apk中。
APK：不参与编译，只会打包到debug/release apk中。
Debug compile：只参与debug编译，只会打包到debug apk中。
Release compile：只参与release编译，只会打包到release apk中。</p>
<h6 id="UIAutomator1-0"><a href="#UIAutomator1-0" class="headerlink" title="UIAutomator1.0"></a>UIAutomator1.0</h6><ol>
<li>新建Java工程</li>
<li>导入lib包 android.jar 和 uiautomator.jar ，选中点击右键Add to buildPath</li>
<li><p>新建测试类demo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public class Demo extends UiAutomatorTestCase&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>写测试方法A，B，C（testcase）</p>
</li>
<li>编译运行：
5.1. <code>&lt;android-sdk&gt;/tools/android create uitest-project -n &lt;name&gt; -t 1 -p &lt;path&gt;</code>
说明一下各个参数的作用，如果已经将android sdk的路径配置到了系统的path中，输入命令“android create uitest-project”就可以查看到相应的帮助</li>
</ol>
<ul>
<li><code>-n --name : Project name.</code>  就是在eclipse中创建的项目的名字。</li>
<li><code>-t --target  : Target ID of the new project. [required]</code>  这个id是本机上android targets的id，可以通过命令 “android list”来查询，得到结果，选择android-17以上版本前面所对应的id,运行完成后，工作空间下生成文件build.xml</li>
</ul>
<p>5.2. 修改build.xml 将help改为build
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;            </div><div class="line">&lt;project name=&quot;demo1&quot; default=&quot;build&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>5.3.在build.xml上点击右键，选择“Run As” -&gt; “Ant Build”,编译成功，在工作空间bin下生成一个jar包demo.jar</p>
<p>5.4. <code>adb  push  demo.jar   /data/local/tmp/</code></p>
<p>5.5. <code>adb shell uiautomator runtest  demo.jar  -c A -c B -c C</code>（可指定多个testcase,不指定则运行所有)</p>
<p>uiautomator的help帮助：
支持三个子命令:rutest/dump/events</p>
<ul>
<li>runtest命令－c指定要测试的class文件，用逗号分开，没有指定的话默认执行测试脚本jar包的所有测试类.注意用户可以以格式$class/$method来指定只是测试该class的某一个指定的方法</li>
<li>runtest命令－e参数可以指定是否开启debug模式</li>
<li>runtest命令－e参数可以指定test runner，不指定就使用系统默认。我自己从来没有指定过</li>
<li>runtest命令－e参数还可以通过键值对来指定传递给测试类的参数</li>
</ul>
<p>UiAutomator2改进</p>
<ol>
<li>基于 Instrumentation，可以获取应用Context，使用 Android服务及接口</li>
<li>基于 Junit4，测试用例无需继承于任何父类，方法名不限，使用注解 Annotation进行</li>
<li>UI执行效率比 1.0 快，测试执行可使用AndroidJunit 方式及gradle 方式</li>
<li><p>API 更新，新增UiObject2、Until、By、BySelector等：APIFor UI Automator</p>
</li>
<li><p>Log 输出变更，以往使用System.out.print输出流回显至执行端，2.0 输出至Logcat</p>
</li>
</ol>
<p><a href="https://developer.android.com/reference/androidx/test/runner/AndroidJUnitRunner.html" target="_blank" rel="external">AndroidJUnitRunner</a>
<a href="https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator" target="_blank" rel="external">AndroidJUnitRunner</a>
<a href="https://developer.android.com/reference/android/test/InstrumentationTestRunner.html" target="_blank" rel="external">InstrumentationTestRunner</a>
<a href="https://developer.android.com/training/testing/fundamentals" target="_blank" rel="external">Fundamentals of Testing</a>
<a href="https://developer.android.com/training/testing/ui-automator.html#java" target="_blank" rel="external">UI Automator</a>
<a href="https://developer.android.com/reference/androidx/test/package-summary.html" target="_blank" rel="external">androidx.test</a>
<a href="https://developer.android.com/training/testing/ui-testing/uiautomator-testing.html" target="_blank" rel="external">Test UI for multiple apps</a>
<a href="https://developer.android.com/reference/android/app/Instrumentation.html" target="_blank" rel="external">Instrumentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;它是一个Android自动化测试框架，是谷歌在Android4.1版本发布时推出的一款用Java编写的UI测试框架。它只能用于UI也就是黑盒方面的测试。所以UiAutomator只能运行在4.1以后的版本中。其最大的特点就是可以跨进程操作，我们可以使用uiautomator
    
    </summary>
    
      <category term="autotest" scheme="http://wodekouwei.com/categories/autotest/"/>
    
    
      <category term="android" scheme="http://wodekouwei.com/tags/android/"/>
    
      <category term="autotest" scheme="http://wodekouwei.com/tags/autotest/"/>
    
      <category term="tools" scheme="http://wodekouwei.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Android TextView对URL识别</title>
    <link href="http://wodekouwei.com/2019/02/26/tips-android-weburl-regular/"/>
    <id>http://wodekouwei.com/2019/02/26/tips-android-weburl-regular/</id>
    <published>2019-02-26T03:32:25.000Z</published>
    <updated>2019-02-26T03:55:45.800Z</updated>
    
    <content type="html"><![CDATA[<p>IM开发过程中,对文本消息中的超练级进行点击处理,使用系统的<code>tv.setAutoLinkMask(Linkify.PHONE_NUMBERS | Linkify.WEB_URLS);</code>方法:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">   * 拦截超链接</div><div class="line">   */</div><div class="line">  public static void interceptHyperLink(TextView tv, ChatContext chatContext, int msg_type,</div><div class="line">      long msg_id, String send_ucid) &#123;</div><div class="line">    tv.setAutoLinkMask(Linkify.PHONE_NUMBERS | Linkify.WEB_URLS);</div><div class="line">    tv.setMovementMethod(LinkMovementMethod.getInstance());</div><div class="line">    CharSequence text = tv.getText();</div><div class="line">    if (text instanceof Spannable) &#123;</div><div class="line">      int end = text.length();</div><div class="line">      Spannable spannable = (Spannable) tv.getText();</div><div class="line">      URLSpan[] urlSpans = spannable.getSpans(0, end, URLSpan.class);</div><div class="line">      if (urlSpans.length == 0) &#123;</div><div class="line">        return;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(text);</div><div class="line">      for (URLSpan uri : urlSpans) &#123;</div><div class="line">        String url = uri.getURL();</div><div class="line">        CustomURLSpan custom = new CustomURLSpan(url, chatContext, msg_type, msg_id, send_ucid);</div><div class="line">        spannableStringBuilder.setSpan(custom, spannableStringBuilder.getSpanStart(uri),</div><div class="line">            spannableStringBuilder.getSpanEnd(uri), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">      &#125;</div><div class="line">      tv.setText(spannableStringBuilder);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>Android自带的表达式(android.util.Patterns)，在不同的ROM上表现形式是不一样的，在一些比较诡异的case上基本识别不出来,比如对于<code>http://lianjia.com/xxx 啊啊啊</code>这种连接,华为手机正常识别了,三星手机把后面的汉字也一起识别了,手机兼容性问题,最后只能自己写正则去匹配:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div></pre></td><td class="code"><pre><div class="line">public class LinkifySpannableUtils &#123;</div><div class="line"></div><div class="line">    public static LinkifySpannableUtils mInstance;</div><div class="line"></div><div class="line">    private Context mContext;</div><div class="line">    private TextView mTextView;</div><div class="line">    private SpannableStringBuilder mSpannableStringBuilder;</div><div class="line"></div><div class="line">    private LinkifySpannableUtils() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static LinkifySpannableUtils getInstance() &#123;</div><div class="line">        if (mInstance == null) &#123;</div><div class="line">            mInstance = new LinkifySpannableUtils();</div><div class="line">        &#125;</div><div class="line">        return mInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSpan(Context context, TextView textView) &#123;</div><div class="line">        this.mContext = context;</div><div class="line">        this.mTextView = textView;</div><div class="line">        addLinks();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void addLinks() &#123;</div><div class="line">        Linkify.addLinks(mTextView, WEB_URL, null);</div><div class="line">        Linkify.addLinks(mTextView, EMAIL_ADDRESS, null);</div><div class="line">        Linkify.addLinks(mTextView, PHONE, null);</div><div class="line"></div><div class="line">        CharSequence cSequence = mTextView.getText();</div><div class="line">        if (cSequence instanceof Spannable) &#123;</div><div class="line">            int end = mTextView.getText().length();</div><div class="line">            Spannable sp = (Spannable) mTextView.getText();</div><div class="line">            URLSpan[] urls = sp.getSpans(0, end, URLSpan.class);</div><div class="line">            mSpannableStringBuilder = new SpannableStringBuilder(sp);</div><div class="line">            mSpannableStringBuilder.clearSpans();</div><div class="line"></div><div class="line">            for (URLSpan url : urls) &#123;</div><div class="line">                String urlString = url.getURL();</div><div class="line">                PatternURLSpan patternURLSpan = new PatternURLSpan(urlString);</div><div class="line">                if (urlString != null &amp;&amp; urlString.length() &gt; 0) &#123;</div><div class="line">                    int _start = sp.getSpanStart(url);</div><div class="line">                    int _end = sp.getSpanEnd(url);</div><div class="line">                    try &#123;</div><div class="line">                        mSpannableStringBuilder.setSpan(patternURLSpan, _start, _end, Spannable.SPAN_EXCLUSIVE_INCLUSIVE);</div><div class="line">                    &#125; catch (Exception e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            mTextView.setLinkTextColor(ColorStateList.valueOf(Color.BLUE));</div><div class="line">            mTextView.setHighlightColor(Color.parseColor(&quot;#AAAAAA&quot;));</div><div class="line">            mTextView.setText(mSpannableStringBuilder);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class PatternURLSpan extends ClickableSpan &#123;</div><div class="line"></div><div class="line">        private String mString;</div><div class="line"></div><div class="line">        PatternURLSpan(String str) &#123;</div><div class="line">            this.mString = str;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onClick(View widget) &#123;</div><div class="line">                if (EMAIL_ADDRESS.matcher(mString).find()) &#123;</div><div class="line">                    sendEmail(mString);</div><div class="line">                &#125; else if (WEB_URL.matcher(mString).find()) &#123;</div><div class="line">                    openUrl(mString);</div><div class="line">                &#125; else if (PHONE.matcher(mString).find()) &#123;</div><div class="line">                    dialNum(mString);</div><div class="line">                &#125; else &#123;</div><div class="line">                    if (mString.contains(&quot;.&quot;)) &#123;</div><div class="line">                        if (mString.startsWith(&quot;http&quot;)) &#123;</div><div class="line">                            openUrl(mString);</div><div class="line">                        &#125; else &#123;</div><div class="line">                            openUrl(&quot;http://&quot; + mString);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 打开系统浏览器</div><div class="line">     * @param url</div><div class="line">     */</div><div class="line">    private void openUrl(String url) &#123;</div><div class="line">        Intent intent = new Intent(Intent.ACTION_VIEW);</div><div class="line">        intent.setData(Uri.parse(url));</div><div class="line">        intent.setClassName(&quot;com.android.browser&quot;,   </div><div class="line">                &quot;com.android.browser.BrowserActivity&quot;);  </div><div class="line">        mContext.startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 拨打电话</div><div class="line">     * @param num</div><div class="line">     */</div><div class="line">    private void dialNum(final String num) &#123;</div><div class="line">        if (num != null &amp;&amp; num.length() &gt; 0) &#123;</div><div class="line">            call(num, mContext);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 调用邮箱</div><div class="line">     * @param address</div><div class="line">     */</div><div class="line">    private void sendEmail(String address) &#123;</div><div class="line">        String[] receive = new String[]&#123;address&#125;;</div><div class="line">        Intent intent = new Intent(Intent.ACTION_SEND);</div><div class="line">        intent.setType(&quot;plain/text&quot;);</div><div class="line">        intent.putExtra(Intent.EXTRA_EMAIL, receive);</div><div class="line">        mContext.startActivity(Intent.createChooser(intent, &quot;&quot;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private void call(final String mobile, final Context activity) &#123;</div><div class="line">        if (mobile == null || mobile.length() == 0) &#123;</div><div class="line">            Toast.makeText(activity, &quot;电话号码为空&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        String phone = mobile.toLowerCase();</div><div class="line">        if (!phone.startsWith(&quot;tel:&quot;)) &#123;</div><div class="line">            phone = &quot;tel:&quot; + mobile;</div><div class="line">        &#125;</div><div class="line">        final String callMobile = phone;</div><div class="line"></div><div class="line">        //适配6.0系统，申请权限</div><div class="line">        if (ActivityCompat.checkSelfPermission(activity, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line"></div><div class="line">            ActivityCompat.requestPermissions((Activity) activity,</div><div class="line">                    new String[]&#123;Manifest.permission.CALL_PHONE&#125;,</div><div class="line">                    MainActivity.REQUESTCODE);</div><div class="line">        &#125;else &#123;</div><div class="line">            callPhone(activity,callMobile);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void callPhone(Context activity, String callMobile) &#123;</div><div class="line">        Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse(callMobile));</div><div class="line">        if (ActivityCompat.checkSelfPermission(activity, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        activity.startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public final String TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL =</div><div class="line">            &quot;(?:&quot;</div><div class="line">                    + &quot;(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])&quot;</div><div class="line">                    + &quot;|(?:biz|b[abdefghijmnorstvwyz])&quot;</div><div class="line">                    + &quot;|(?:cat|com|coop|c[acdfghiklmnoruvxyz])&quot;</div><div class="line">                    + &quot;|d[ejkmoz]&quot;</div><div class="line">                    + &quot;|(?:edu|e[cegrstu])&quot;</div><div class="line">                    + &quot;|f[ijkmor]&quot;</div><div class="line">                    + &quot;|(?:gov|g[abdefghilmnpqrstuwy])&quot;</div><div class="line">                    + &quot;|h[kmnrtu]&quot;</div><div class="line">                    + &quot;|(?:info|int|i[delmnoqrst])&quot;</div><div class="line">                    + &quot;|(?:jobs|j[emop])&quot;</div><div class="line">                    + &quot;|k[eghimnprwyz]&quot;</div><div class="line">                    + &quot;|l[abcikrstuvy]&quot;</div><div class="line">                    + &quot;|(?:mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])&quot;</div><div class="line">                    + &quot;|(?:name|net|n[acefgilopruz])&quot;</div><div class="line">                    + &quot;|(?:org|om)&quot;</div><div class="line">                    + &quot;|(?:pro|p[aefghklmnrstwy])&quot;</div><div class="line">                    + &quot;|qa&quot;</div><div class="line">                    + &quot;|r[eosuw]&quot;</div><div class="line">                    + &quot;|s[abcdeghijklmnortuvyz]&quot;</div><div class="line">                    + &quot;|(?:tel|travel|t[cdfghjklmnoprtvwz])&quot;</div><div class="line">                    + &quot;|u[agksyz]&quot;</div><div class="line">                    + &quot;|v[aceginu]&quot;</div><div class="line">                    + &quot;|w[fs]&quot;</div><div class="line">                    + &quot;|(?:\u03b4\u03bf\u03ba\u03b9\u03bc\u03ae|\u0438\u0441\u043f\u044b\u0442\u0430\u043d\u0438\u0435|\u0440\u0444|\u0441\u0440\u0431|\u05d8\u05e2\u05e1\u05d8|\u0622\u0632\u0645\u0627\u06cc\u0634\u06cc|\u0625\u062e\u062a\u0628\u0627\u0631|\u0627\u0644\u0627\u0631\u062f\u0646|\u0627\u0644\u062c\u0632\u0627\u0626\u0631|\u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629|\u0627\u0644\u0645\u063a\u0631\u0628|\u0627\u0645\u0627\u0631\u0627\u062a|\u0628\u06be\u0627\u0631\u062a|\u062a\u0648\u0646\u0633|\u0633\u0648\u0631\u064a\u0629|\u0641\u0644\u0633\u0637\u064a\u0646|\u0642\u0637\u0631|\u0645\u0635\u0631|\u092a\u0930\u0940\u0915\u094d\u0937\u093e|\u092d\u093e\u0930\u0924|\u09ad\u09be\u09b0\u09a4|\u0a2d\u0a3e\u0a30\u0a24|\u0aad\u0abe\u0ab0\u0aa4|\u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe|\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8|\u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd|\u0baa\u0bb0\u0bbf\u0b9f\u0bcd\u0b9a\u0bc8|\u0c2d\u0c3e\u0c30\u0c24\u0c4d|\u0dbd\u0d82\u0d9a\u0dcf|\u0e44\u0e17\u0e22|\u30c6\u30b9\u30c8|\u4e2d\u56fd|\u4e2d\u570b|\u53f0\u6e7e|\u53f0\u7063|\u65b0\u52a0\u5761|\u6d4b\u8bd5|\u6e2c\u8a66|\u9999\u6e2f|\ud14c\uc2a4\ud2b8|\ud55c\uad6d|xn\\-\\-0zwm56d|xn\\-\\-11b5bs3a9aj6g|xn\\-\\-3e0b707e|xn\\-\\-45brj9c|xn\\-\\-80akhbyknj4f|xn\\-\\-90a3ac|xn\\-\\-9t4b11yi5a|xn\\-\\-clchc0ea0b2g2a9gcd|xn\\-\\-deba0ad|xn\\-\\-fiqs8s|xn\\-\\-fiqz9s|xn\\-\\-fpcrj9c3d|xn\\-\\-fzc2c9e2c|xn\\-\\-g6w251d|xn\\-\\-gecrj9c|xn\\-\\-h2brj9c|xn\\-\\-hgbk6aj7f53bba|xn\\-\\-hlcj6aya9esc7a|xn\\-\\-j6w193g|xn\\-\\-jxalpdlp|xn\\-\\-kgbechtv|xn\\-\\-kprw13d|xn\\-\\-kpry57d|xn\\-\\-lgbbat1ad8j|xn\\-\\-mgbaam7a8h|xn\\-\\-mgbayh7gpa|xn\\-\\-mgbbh1a71e|xn\\-\\-mgbc0a9azcg|xn\\-\\-mgberp4a5d4ar|xn\\-\\-o3cw4h|xn\\-\\-ogbpf8fl|xn\\-\\-p1ai|xn\\-\\-pgbs0dh|xn\\-\\-s9brj9c|xn\\-\\-wgbh1c|xn\\-\\-wgbl6a|xn\\-\\-xkc2al3hye2a|xn\\-\\-xkc2dl3a5ee0h|xn\\-\\-yfro4i67o|xn\\-\\-ygbi2ammx|xn\\-\\-zckzah|xxx)&quot;</div><div class="line">                    + &quot;|y[et]&quot; + &quot;|z[amw]))&quot;;</div><div class="line"></div><div class="line">    public final String GOOD_IRI_CHAR = &quot;a-zA-Z0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF&quot;;</div><div class="line"></div><div class="line"></div><div class="line">    public final Pattern WEB_URL = Pattern</div><div class="line">            .compile(&quot;((?:(http|https|Http|Https|rtsp|Rtsp):\\/\\/(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\&apos;\\(\\)&quot;</div><div class="line">                    + &quot;\\,\\;\\?\\&amp;\\=]|(?:\\%[a-fA-F0-9]&#123;2&#125;))&#123;1,64&#125;(?:\\:(?:[a-zA-Z0-9\\$\\-\\_&quot;</div><div class="line">                    + &quot;\\.\\+\\!\\*\\&apos;\\(\\)\\,\\;\\?\\&amp;\\=]|(?:\\%[a-fA-F0-9]&#123;2&#125;))&#123;1,25&#125;)?\\@)?)?&quot;</div><div class="line">                    + &quot;((?:(?:[&quot;</div><div class="line">                    + GOOD_IRI_CHAR</div><div class="line">                    + &quot;][&quot;</div><div class="line">                    + GOOD_IRI_CHAR</div><div class="line">                    + &quot;\\-]&#123;0,64&#125;\\.)+&quot; // named host</div><div class="line">                    + TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL</div><div class="line">                    + &quot;|(?:(?:25[0-5]|2[0-4]&quot; // or ip address</div><div class="line">                    + &quot;[0-9]|[0-1][0-9]&#123;2&#125;|[1-9][0-9]|[1-9])\\.(?:25[0-5]|2[0-4][0-9]&quot;</div><div class="line">                    + &quot;|[0-1][0-9]&#123;2&#125;|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1]&quot;</div><div class="line">                    + &quot;[0-9]&#123;2&#125;|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]&#123;2&#125;&quot; + &quot;|[1-9][0-9]|[0-9])))&quot;</div><div class="line">                    + &quot;(?:\\:\\d&#123;1,5&#125;)?)&quot; // plus option port number</div><div class="line">                    + &quot;(\\/(?:(?:[&quot; + GOOD_IRI_CHAR + &quot;\\;\\/\\?\\:\\@\\&amp;\\=\\#\\~&quot; // plus option query</div><div class="line">                    // params</div><div class="line">                    + &quot;\\-\\.\\+\\!\\*\\&apos;\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]&#123;2&#125;))*)?&quot; + &quot;(?:\\b|$)&quot;);</div><div class="line"></div><div class="line">    public static final Pattern EMAIL_ADDRESS = Pattern.compile(&quot;[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]&#123;1,256&#125;&quot; + &quot;\\@&quot;</div><div class="line">            + &quot;[a-zA-Z0-9][a-zA-Z0-9\\-]&#123;0,64&#125;&quot; + &quot;(&quot; + &quot;\\.&quot; + &quot;[a-zA-Z0-9][a-zA-Z0-9\\-]&#123;0,25&#125;&quot; + &quot;)+&quot;);</div><div class="line">    public static final Pattern EMAIL_PATTERN = Pattern.compile(&quot;[A-Z0-9a-z\\._%+-]+@([A-Za-z0-9-]+\\.)+[A-Za-z]&#123;2,4&#125;&quot;);</div><div class="line">    public static final Pattern WEB_PATTERN =</div><div class="line">            Pattern</div><div class="line">                    .compile(&quot;((http[s]&#123;0,1&#125;|ftp)://[a-zA-Z0-9\\.\\-]+\\.([a-zA-Z]&#123;2,4&#125;)(:\\d+)?(/[a-zA-Z0-9\\.\\-~!@#$%^&amp;*+?:_/=&lt;&gt;]*)?)|(www.[a-zA-Z0-9\\.\\-]+\\.([a-zA-Z]&#123;2,4&#125;)(:\\d+)?(/[a-zA-Z0-9\\.\\-~!@#$%^&amp;*+?:_/=&lt;&gt;]*)?)&quot;);</div><div class="line"></div><div class="line">    public static final Pattern PHONE = Pattern.compile( // sdd = space, dot, or dash</div><div class="line">            &quot;(\\+[0-9]+[\\- \\.]*)?&quot; // +&lt;digits&gt;&lt;sdd&gt;*</div><div class="line">                    + &quot;(\\([0-9]+\\)[\\- \\.]*)?&quot; // (&lt;digits&gt;)&lt;sdd&gt;*</div><div class="line">                    + &quot;([0-9][0-9\\- \\.][0-9\\- \\.]+[0-9])&quot;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述WEB_URL正则仍不能正常识别,最后采用:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// all domain names</div><div class="line">private static final String[] ext = &#123;</div><div class="line">    &quot;top&quot;, &quot;com.cn&quot;, &quot;com&quot;, &quot;net&quot;, &quot;org&quot;, &quot;edu&quot;, &quot;gov&quot;, &quot;int&quot;, &quot;mil&quot;, &quot;cn&quot;, &quot;tel&quot;, &quot;biz&quot;, &quot;cc&quot;, &quot;tv&quot;, &quot;info&quot;, </div><div class="line">    &quot;name&quot;, &quot;hk&quot;, &quot;mobi&quot;, &quot;asia&quot;, &quot;cd&quot;, &quot;travel&quot;, &quot;pro&quot;, &quot;museum&quot;, &quot;coop&quot;, &quot;aero&quot;, &quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, </div><div class="line">    &quot;ag&quot;, &quot;ai&quot;, &quot;al&quot;, &quot;am&quot;, &quot;an&quot;, &quot;ao&quot;, &quot;aq&quot;, &quot;ar&quot;, &quot;as&quot;, &quot;at&quot;, &quot;au&quot;, &quot;aw&quot;, &quot;az&quot;, &quot;ba&quot;, &quot;bb&quot;, &quot;bd&quot;, </div><div class="line">    &quot;be&quot;, &quot;bf&quot;, &quot;bg&quot;, &quot;bh&quot;, &quot;bi&quot;, &quot;bj&quot;, &quot;bm&quot;, &quot;bn&quot;, &quot;bo&quot;, &quot;br&quot;, &quot;bs&quot;, &quot;bt&quot;, &quot;bv&quot;, &quot;bw&quot;, &quot;by&quot;, &quot;bz&quot;, </div><div class="line">    &quot;ca&quot;, &quot;cc&quot;, &quot;cf&quot;, &quot;cg&quot;, &quot;ch&quot;, &quot;ci&quot;, &quot;ck&quot;, &quot;cl&quot;, &quot;cm&quot;, &quot;cn&quot;, &quot;co&quot;, &quot;cq&quot;, &quot;cr&quot;, &quot;cu&quot;, &quot;cv&quot;, &quot;cx&quot;, </div><div class="line">    &quot;cy&quot;, &quot;cz&quot;, &quot;de&quot;, &quot;dj&quot;, &quot;dk&quot;, &quot;dm&quot;, &quot;do&quot;, &quot;dz&quot;, &quot;ec&quot;, &quot;ee&quot;, &quot;eg&quot;, &quot;eh&quot;, &quot;es&quot;, &quot;et&quot;, &quot;ev&quot;, &quot;fi&quot;, </div><div class="line">    &quot;fj&quot;, &quot;fk&quot;, &quot;fm&quot;, &quot;fo&quot;, &quot;fr&quot;, &quot;ga&quot;, &quot;gb&quot;, &quot;gd&quot;, &quot;ge&quot;, &quot;gf&quot;, &quot;gh&quot;, &quot;gi&quot;, &quot;gl&quot;, &quot;gm&quot;, &quot;gn&quot;, &quot;gp&quot;, </div><div class="line">    &quot;gr&quot;, &quot;gt&quot;, &quot;gu&quot;, &quot;gw&quot;, &quot;gy&quot;, &quot;hk&quot;, &quot;hm&quot;, &quot;hn&quot;, &quot;hr&quot;, &quot;ht&quot;, &quot;hu&quot;, &quot;id&quot;, &quot;ie&quot;, &quot;il&quot;, &quot;in&quot;, &quot;io&quot;, </div><div class="line">    &quot;iq&quot;, &quot;ir&quot;, &quot;is&quot;, &quot;it&quot;, &quot;jm&quot;, &quot;jo&quot;, &quot;jp&quot;, &quot;ke&quot;, &quot;kg&quot;, &quot;kh&quot;, &quot;ki&quot;, &quot;km&quot;, &quot;kn&quot;, &quot;kp&quot;, &quot;kr&quot;, &quot;kw&quot;, </div><div class="line">    &quot;ky&quot;, &quot;kz&quot;, &quot;la&quot;, &quot;lb&quot;, &quot;lc&quot;, &quot;li&quot;, &quot;lk&quot;, &quot;lr&quot;, &quot;ls&quot;, &quot;lt&quot;, &quot;lu&quot;, &quot;lv&quot;, &quot;ly&quot;, &quot;ma&quot;, &quot;mc&quot;, &quot;md&quot;, </div><div class="line">    &quot;mg&quot;, &quot;mh&quot;, &quot;ml&quot;, &quot;mm&quot;, &quot;mn&quot;, &quot;mo&quot;, &quot;mp&quot;, &quot;mq&quot;, &quot;mr&quot;, &quot;ms&quot;, &quot;mt&quot;, &quot;mv&quot;, &quot;mw&quot;, &quot;mx&quot;, &quot;my&quot;, &quot;mz&quot;,</div><div class="line">    &quot;na&quot;, &quot;nc&quot;, &quot;ne&quot;, &quot;nf&quot;, &quot;ng&quot;, &quot;ni&quot;, &quot;nl&quot;, &quot;no&quot;, &quot;np&quot;, &quot;nr&quot;, &quot;nt&quot;, &quot;nu&quot;, &quot;nz&quot;, &quot;om&quot;, &quot;qa&quot;, &quot;pa&quot;, </div><div class="line">    &quot;pe&quot;, &quot;pf&quot;, &quot;pg&quot;, &quot;ph&quot;, &quot;pk&quot;, &quot;pl&quot;, &quot;pm&quot;, &quot;pn&quot;, &quot;pr&quot;, &quot;pt&quot;, &quot;pw&quot;, &quot;py&quot;, &quot;re&quot;, &quot;ro&quot;, &quot;ru&quot;, &quot;rw&quot;, </div><div class="line">    &quot;sa&quot;, &quot;sb&quot;, &quot;sc&quot;, &quot;sd&quot;, &quot;se&quot;, &quot;sg&quot;, &quot;sh&quot;, &quot;si&quot;, &quot;sj&quot;, &quot;sk&quot;, &quot;sl&quot;, &quot;sm&quot;, &quot;sn&quot;, &quot;so&quot;, &quot;sr&quot;, &quot;st&quot;, </div><div class="line">    &quot;su&quot;, &quot;sy&quot;, &quot;sz&quot;, &quot;tc&quot;, &quot;td&quot;, &quot;tf&quot;, &quot;tg&quot;, &quot;th&quot;, &quot;tj&quot;, &quot;tk&quot;, &quot;tm&quot;, &quot;tn&quot;, &quot;to&quot;, &quot;tp&quot;, &quot;tr&quot;, &quot;tt&quot;, </div><div class="line">    &quot;tv&quot;, &quot;tw&quot;, &quot;tz&quot;, &quot;ua&quot;, &quot;ug&quot;, &quot;uk&quot;, &quot;us&quot;, &quot;uy&quot;, &quot;va&quot;, &quot;vc&quot;, &quot;ve&quot;, &quot;vg&quot;, &quot;vn&quot;, &quot;vu&quot;, &quot;wf&quot;, &quot;ws&quot;, </div><div class="line">    &quot;ye&quot;, &quot;yu&quot;, &quot;za&quot;, &quot;zm&quot;, &quot;zr&quot;, &quot;zw&quot;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">static &#123;   </div><div class="line">    StringBuilder sb = new StringBuilder();   </div><div class="line">    sb.append(&quot;(&quot;);   </div><div class="line">    for (int i = 0; i &lt; ext.length; i++) &#123;      </div><div class="line">        sb.append(ext[i]);      </div><div class="line">        sb.append(&quot;|&quot;);   </div><div class="line">    &#125;   </div><div class="line">    sb.deleteCharAt(sb.length() - 1);   </div><div class="line">    sb.append(&quot;)&quot;);   </div><div class="line">    // final pattern str</div><div class="line">    String pattern = &quot;((https?|s?ftp|irc[6s]?|git|afp|telnet|smb)://)?((\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;)|((www\\.|[a-zA-Z\\.\\-]+\\.)?[a-zA-Z0-9\\-]+\\.&quot; + sb.toString() + &quot;(:[0-9]&#123;1,5&#125;)?))((/[a-zA-Z0-9\\./,;\\?&apos;\\+&amp;%\\$#=~_\\-]*)|([^\\u4e00-\\u9fa5\\s0-9a-zA-Z\\./,;\\?&apos;\\+&amp;%\\$#=~_\\-]*))&quot;;   </div><div class="line">    // Log.v(TAG, &quot;pattern = &quot; + pattern);   </div><div class="line">    WEB_URL = Pattern.compile(pattern);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IM开发过程中,对文本消息中的超练级进行点击处理,使用系统的&lt;code&gt;tv.setAutoLinkMask(Linkify.PHONE_NUMBERS | Linkify.WEB_URLS);&lt;/code&gt;方法:
&lt;figure class=&quot;highlight plai
    
    </summary>
    
      <category term="Android" scheme="http://wodekouwei.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://wodekouwei.com/tags/Android/"/>
    
      <category term="tips" scheme="http://wodekouwei.com/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>常用命令备忘</title>
    <link href="http://wodekouwei.com/2019/02/26/tips-universal-cmd/"/>
    <id>http://wodekouwei.com/2019/02/26/tips-universal-cmd/</id>
    <published>2019-02-26T02:55:28.000Z</published>
    <updated>2019-03-01T06:08:33.104Z</updated>
    
    <content type="html"><![CDATA[<h5 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h5><ul>
<li><code>git stash save &quot;test-cmd-stash&quot;</code>:给stash增加message</li>
<li><code>git stash pop</code>:将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下。</li>
<li><code>git stash apply</code>:将缓存堆栈中的stash多次应用到工作目录中，但并不删除stash拷贝</li>
<li><code>git stash list</code>:查看现有stash</li>
<li><code>git stash drop stash@{0}</code>:移除stash</li>
<li><code>git stash clear</code>:删除所有缓存的stash</li>
<li><code>git stash show</code>:查看指定stash的diff,后面可以跟着stash名字,还可以添加-p或–patch,查看特定stash的全部diff</li>
<li><code>git stash branch</code>:创建一个新的分支,检出储藏工作时的所处的提交,重新应用工作</li>
<li><code>git stash -u/--include-untracked</code>储藏untracked文件,<code>git stash -a/--all</code>:stash当前目录下所有修改</li>
</ul>
<h5 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h5>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;git-stash&quot;&gt;&lt;a href=&quot;#git-stash&quot; class=&quot;headerlink&quot; title=&quot;git stash&quot;&gt;&lt;/a&gt;git stash&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git stash save &amp;quot;test-cmd-
    
    </summary>
    
      <category term="tips" scheme="http://wodekouwei.com/categories/tips/"/>
    
    
      <category term="tips" scheme="http://wodekouwei.com/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装配置</title>
    <link href="http://wodekouwei.com/2019/02/15/env-centos-nginx/"/>
    <id>http://wodekouwei.com/2019/02/15/env-centos-nginx/</id>
    <published>2019-02-15T09:24:07.000Z</published>
    <updated>2019-02-15T09:45:08.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CentOS安装Nginx"><a href="#CentOS安装Nginx" class="headerlink" title="CentOS安装Nginx"></a>CentOS安装Nginx</h2><p>Nginx(“engine x”)是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的 Web和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。</p>
<p>在高连接并发的情况下，Nginx是Apache服务器不错的替代品。</p>
<p>系统平台: 阿里云CentOS7.6 64位</p>
<h3 id="1-安装编译工具及库文件"><a href="#1-安装编译工具及库文件" class="headerlink" title="1.安装编译工具及库文件"></a>1.安装编译工具及库文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</div></pre></td></tr></table></figure>
<h3 id="2-首先要安装PCRE"><a href="#2-首先要安装PCRE" class="headerlink" title="2.首先要安装PCRE"></a>2.首先要安装PCRE</h3><p>PCRE 作用是让 Nginx 支持 Rewrite 功能</p>
<h4 id="2-1-下载PCRE安装包"><a href="#2-1-下载PCRE安装包" class="headerlink" title="2.1 下载PCRE安装包:"></a>2.1 下载PCRE安装包:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/src/</div><div class="line">wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</div></pre></td></tr></table></figure>
<h4 id="2-2-解压安装包"><a href="#2-2-解压安装包" class="headerlink" title="2.2 解压安装包"></a>2.2 解压安装包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf pcre-8.35.tar.gz</div></pre></td></tr></table></figure>
<h4 id="2-3-进入安装包目录"><a href="#2-3-进入安装包目录" class="headerlink" title="2.3 进入安装包目录"></a>2.3 进入安装包目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd pcre-8.35</div></pre></td></tr></table></figure>
<h4 id="2-4-编译安装"><a href="#2-4-编译安装" class="headerlink" title="2.4 编译安装"></a>2.4 编译安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h5 id="2-5-查看pcre版本"><a href="#2-5-查看pcre版本" class="headerlink" title="2.5 查看pcre版本"></a>2.5 查看pcre版本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pcre-config --version</div></pre></td></tr></table></figure>
<h3 id="3-安装Nginx"><a href="#3-安装Nginx" class="headerlink" title="3.安装Nginx"></a>3.安装Nginx</h3><h4 id="3-1-下载-Nginx，下载地址：http-nginx-org-download-nginx-1-6-2-tar-gz"><a href="#3-1-下载-Nginx，下载地址：http-nginx-org-download-nginx-1-6-2-tar-gz" class="headerlink" title="3.1 下载 Nginx，下载地址：http://nginx.org/download/nginx-1.6.2.tar.gz"></a>3.1 下载 Nginx，下载地址：<a href="http://nginx.org/download/nginx-1.6.2.tar.gz" target="_blank" rel="external">http://nginx.org/download/nginx-1.6.2.tar.gz</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/src/</div><div class="line">wget http://nginx.org/download/nginx-1.6.2.tar.gz</div></pre></td></tr></table></figure>
<h4 id="3-2-解压安装包"><a href="#3-2-解压安装包" class="headerlink" title="3.2 解压安装包"></a>3.2 解压安装包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf nginx-1.6.2.tar.gz</div></pre></td></tr></table></figure>
<h4 id="3-3-进入安装包目录"><a href="#3-3-进入安装包目录" class="headerlink" title="3.3 进入安装包目录"></a>3.3 进入安装包目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd nginx-1.6.2</div></pre></td></tr></table></figure>
<h4 id="3-4-编译安装"><a href="#3-4-编译安装" class="headerlink" title="3.4 编译安装"></a>3.4 编译安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<h4 id="3-5-查看nginx版本"><a href="#3-5-查看nginx版本" class="headerlink" title="3.5 查看nginx版本"></a>3.5 查看nginx版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/webserver/nginx/sbin/nginx -v</div></pre></td></tr></table></figure>
<h3 id="4-Nginx-配置"><a href="#4-Nginx-配置" class="headerlink" title="4. Nginx 配置"></a>4. Nginx 配置</h3><p>创建 Nginx 运行使用的用户 www：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/sbin/groupadd www </div><div class="line">/usr/sbin/useradd -g www www</div></pre></td></tr></table></figure></p>
<p>配置nginx.conf ，将<code>/usr/local/webserver/nginx/conf/nginx.conf</code>替换为以下内容
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">cat /usr/local/webserver/nginx/conf/nginx.conf</div><div class="line"></div><div class="line">user www www;</div><div class="line">worker_processes 2; #设置值和CPU核心数一致</div><div class="line">error_log /usr/local/webserver/nginx/logs/nginx_error.log crit; #日志位置和日志级别</div><div class="line">pid /usr/local/webserver/nginx/nginx.pid;</div><div class="line">#Specifies the value for maximum file descriptors that can be opened by this process.</div><div class="line">worker_rlimit_nofile 65535;</div><div class="line">events</div><div class="line">&#123;</div><div class="line">  use epoll;</div><div class="line">  worker_connections 65535;</div><div class="line">&#125;</div><div class="line">http</div><div class="line">&#123;</div><div class="line">  include mime.types;</div><div class="line">  default_type application/octet-stream;</div><div class="line">  log_format main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">               &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">               &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</div><div class="line">  </div><div class="line">#charset gb2312;</div><div class="line">     </div><div class="line">  server_names_hash_bucket_size 128;</div><div class="line">  client_header_buffer_size 32k;</div><div class="line">  large_client_header_buffers 4 32k;</div><div class="line">  client_max_body_size 8m;</div><div class="line">     </div><div class="line">  sendfile on;</div><div class="line">  tcp_nopush on;</div><div class="line">  keepalive_timeout 60;</div><div class="line">  tcp_nodelay on;</div><div class="line">  fastcgi_connect_timeout 300;</div><div class="line">  fastcgi_send_timeout 300;</div><div class="line">  fastcgi_read_timeout 300;</div><div class="line">  fastcgi_buffer_size 64k;</div><div class="line">  fastcgi_buffers 4 64k;</div><div class="line">  fastcgi_busy_buffers_size 128k;</div><div class="line">  fastcgi_temp_file_write_size 128k;</div><div class="line">  gzip on; </div><div class="line">  gzip_min_length 1k;</div><div class="line">  gzip_buffers 4 16k;</div><div class="line">  gzip_http_version 1.0;</div><div class="line">  gzip_comp_level 2;</div><div class="line">  gzip_types text/plain application/x-javascript text/css application/xml;</div><div class="line">  gzip_vary on;</div><div class="line"> </div><div class="line">  #limit_zone crawler $binary_remote_addr 10m;</div><div class="line"> #下面是server虚拟主机的配置</div><div class="line"> server</div><div class="line">  &#123;</div><div class="line">    listen 80;#监听端口</div><div class="line">    server_name localhost;#域名</div><div class="line">    index index.html index.htm index.php;</div><div class="line">    root /usr/local/webserver/nginx/html;#站点目录</div><div class="line">      location ~ .*\.(php|php5)?$</div><div class="line">    &#123;</div><div class="line">      #fastcgi_pass unix:/tmp/php-cgi.sock;</div><div class="line">      fastcgi_pass 127.0.0.1:9000;</div><div class="line">      fastcgi_index index.php;</div><div class="line">      include fastcgi.conf;</div><div class="line">    &#125;</div><div class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$</div><div class="line">    &#123;</div><div class="line">      expires 30d;</div><div class="line">  # access_log off;</div><div class="line">    &#125;</div><div class="line">    location ~ .*\.(js|css)?$</div><div class="line">    &#123;</div><div class="line">      expires 15d;</div><div class="line">   # access_log off;</div><div class="line">    &#125;</div><div class="line">    access_log off;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>检查配置文件nginx.conf的正确性命令：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/webserver/nginx/sbin/nginx -t</div></pre></td></tr></table></figure></p>
<h3 id="4-Nginx命令"><a href="#4-Nginx命令" class="headerlink" title="4. Nginx命令"></a>4. Nginx命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/usr/local/webserver/nginx/sbin/nginx                      # 启动</div><div class="line">/usr/local/webserver/nginx/sbin/nginx -s reload            # 重新载入配置文件</div><div class="line">/usr/local/webserver/nginx/sbin/nginx -s reopen            # 重启 Nginx</div><div class="line">/usr/local/webserver/nginx/sbin/nginx -s stop              # 停止 Nginx</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CentOS安装Nginx&quot;&gt;&lt;a href=&quot;#CentOS安装Nginx&quot; class=&quot;headerlink&quot; title=&quot;CentOS安装Nginx&quot;&gt;&lt;/a&gt;CentOS安装Nginx&lt;/h2&gt;&lt;p&gt;Nginx(“engine x”)是一款是由俄罗斯的
    
    </summary>
    
      <category term="env" scheme="http://wodekouwei.com/categories/env/"/>
    
    
      <category term="tools" scheme="http://wodekouwei.com/tags/tools/"/>
    
      <category term="Linux" scheme="http://wodekouwei.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>FFMPEG常用命令</title>
    <link href="http://wodekouwei.com/2019/02/11/ffmpeg-command/"/>
    <id>http://wodekouwei.com/2019/02/11/ffmpeg-command/</id>
    <published>2019-02-11T03:01:13.000Z</published>
    <updated>2019-02-11T03:04:23.967Z</updated>
    
    <content type="html"><![CDATA[<h6 id="将多个视频片段合成一个视频"><a href="#将多个视频片段合成一个视频" class="headerlink" title="将多个视频片段合成一个视频"></a>将多个视频片段合成一个视频</h6><p>新建文本文件,输入要合成的视频列表(如果文件名有奇怪的字符,需要转意)
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">file &apos;output_train_video_0.mp4&apos;</div><div class="line">file &apos;output_train_video_1.mp4&apos;</div><div class="line">file &apos;output_train_video_2.mp4&apos;</div><div class="line">file &apos;output_train_video_3.mp4&apos;</div><div class="line">file &apos;output_train_video_4.mp4&apos;</div></pre></td></tr></table></figure></p>
<p>执行
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -f concat -i filelist.txt -c copy output_set.mp4</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;将多个视频片段合成一个视频&quot;&gt;&lt;a href=&quot;#将多个视频片段合成一个视频&quot; class=&quot;headerlink&quot; title=&quot;将多个视频片段合成一个视频&quot;&gt;&lt;/a&gt;将多个视频片段合成一个视频&lt;/h6&gt;&lt;p&gt;新建文本文件,输入要合成的视频列表(如果文件名有奇怪
    
    </summary>
    
      <category term="FFMPEG" scheme="http://wodekouwei.com/categories/FFMPEG/"/>
    
    
      <category term="多媒体" scheme="http://wodekouwei.com/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
      <category term="FFMPEG" scheme="http://wodekouwei.com/tags/FFMPEG/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL之EGL</title>
    <link href="http://wodekouwei.com/2019/01/30/gl-egl/"/>
    <id>http://wodekouwei.com/2019/01/30/gl-egl/</id>
    <published>2019-01-30T10:48:27.000Z</published>
    <updated>2019-01-31T03:09:41.466Z</updated>
    
    <content type="html"><![CDATA[<p>OpenGL ES的javax.microedition.khronos.openges包定义了平台无关的GL绘制指令,EGL(javax.microedition.khronos.egl)则定义了控制dispays,contexts以及surfaces的统一的平台接口.</p>
<p><img src="http://images.wodekouwei.com/gl/egl.png" alt="image"></p>
<ul>
<li>Display(EGLDisplay)是对实际显示设备的抽象</li>
<li>Surface(EGLSurface)是对用来存储图像的内存区域FrameBuffer的抽象,包括Color Buffer, Stencil Buffer, Depth Buffer.</li>
<li>Context(EGLContext)存储OpenGLES绘图的一些状态信息</li>
</ul>
<p>使用EGL绘制的一般步骤:</p>
<ol>
<li>获取EGLDisplay对象</li>
<li>初始化与EGLDisplay之间的连接</li>
<li>获取EGLConfig实例</li>
<li>创建EGLContext实例</li>
<li>创建EGLSurface实例</li>
<li>连接EGLContext和EGLSurface</li>
<li>使用GL指令绘制图形</li>
<li>断开并释放与EGLSurface关联的EGLContext对象</li>
<li>删除EGLSurface对象</li>
<li>删除EGLContext对象</li>
<li>终止与EGLDisplay之间的连接</li>
</ol>
<p>源码:
本地代码:</p>
<ul>
<li><code>frameworks/native/opengl/libs/EGL</code>:Android EGL框架，负责加载OpenGL函数库和EGL本地实现。</li>
<li><code>frameworks/native/opengl/libagl</code>:Android提供的OpenGL软件库</li>
</ul>
<p>JNI代码:</p>
<ul>
<li><code>frameworks/base/core/jni/com_google_android_gles_jni_EGLImpl.cpp</code>:EGL本地代码的JNI调用接口</li>
<li><code>frameworks/base/core/jni/com_google_android_gles_jni_GLImpl.cpp</code></li>
<li><code>frameworks/base/core/jni/android_opengl_GLESXXX.cpp</code>:OpenGL功能函数的JNI调用接口</li>
</ul>
<p>JAVA代码:</p>
<ul>
<li><code>frameworks/base/opengl/java/javax/microedition/khronos/egl</code></li>
<li><code>frameworks/base/opengl/java/javax/microedition/khronos/opengles</code></li>
<li><code>frameworks/base/opengl/java/com/google/android/gles_jni/</code></li>
<li><code>frameworks/base/opengl/java/android/opengl</code> :EGL和OpenGL的Java层接口，提供给应用开发者，通过JNI方式调用底层函数。</li>
</ul>
<h4 id="eglSwapBuffers接口实现说明"><a href="#eglSwapBuffers接口实现说明" class="headerlink" title="eglSwapBuffers接口实现说明"></a>eglSwapBuffers接口实现说明</h4><p>一般性嵌入式平台
<img src="http://images.wodekouwei.com/gl/egl_swapbuffer.png" alt="iamge"></p>
<p>利用双缓冲进行Swap的时候，Display和Surface进行实际意义上的地址交换，来实现eglSwapBuffers的标准， 如上图的右侧所示。上图的左侧表示，单缓冲Framebuffer的形式，Surface永远都在后端， 显示的永远是Display，在GPU出现后已不使用。</p>
<p>Android平台:
为了实现eglSwapBuffers， eglSurface其实代表了一个从NativeWindow 申请到的一个Buffer（Dequeue操作）。当调用eglSwapBuffers时，对于一般应用窗口而言，NativeWindow将该Surface的Buffer 提交回去给SurfaceFlinger（Queue操作)，然后又重新从NativeWindow中重新Dequeue出来一个新的Buffer给eglSurface。而eglDisplay并不代表实际的意义。我们只是从接口上感觉是，surface和display进行了交换。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenGL ES的javax.microedition.khronos.openges包定义了平台无关的GL绘制指令,EGL(javax.microedition.khronos.egl)则定义了控制dispays,contexts以及surfaces的统一的平台接口.&lt;
    
    </summary>
    
      <category term="OpenGL" scheme="http://wodekouwei.com/categories/OpenGL/"/>
    
    
      <category term="OpenGL" scheme="http://wodekouwei.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>日常的</title>
    <link href="http://wodekouwei.com/2019/01/30/daily/"/>
    <id>http://wodekouwei.com/2019/01/30/daily/</id>
    <published>2019-01-30T10:36:22.000Z</published>
    <updated>2019-02-20T11:25:42.131Z</updated>
    
    <content type="html"><![CDATA[<p>Parameters were incorrect. We wanted {“required”:[“desiredCapabilities”],
pip uninstall selenium
pip install selenium==3.0.1</p>
<p>fbo与pbuffer区别</p>
<p>像zoom这样把多个流放到一个upd里究竟有什么好处?
节省端口
这个理由似乎不是很充分，付出的代价有点大，而且单机其实支持不了多少路，端口足够用了</p>
<p>付出什么代价了
单机支持一两千路足够视频会议用了\</p>
<p>猜测而已: 1. 避免NAT穿越时候多个Port的维护  2. 在UDP层面复用的话，保证UDP的流量足够，同时也避免了维护多个Socket，减小资源开销
当集群来应对大量客户的时候，这样做的话，机器之间会有很多的互相拉流的操作，</p>
<p>ICE打洞过程会快了，但是也得要支持动态更新啊，因为肯定会存在半路上有人进，有人出，SDP不是要变化吗？</p>
<p>没记错的话，RTP、RTCP曾经打算复用一个Port，避免一次使用两个 ：）</p>
<p>和TS的统计复用很类似
所以我猜测Zoom并不是全部随意把流放到一个Port里面去，上层逻辑是做了控制的
TS的统计复用是为了适应CBR</p>
<p>我抓包看到ZOOM是哪个SFU入，就从那个SFU出流，但流被复接连</p>
<p>是不是好做集群，好做负载均衡，好做就近接入，还是好和SD-WAN结合，我想ZOOM体验那么好，一定是多方面优化的结果，究竟在哪些地方不一样达成的这种效果</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Parameters were incorrect. We wanted {“required”:[“desiredCapabilities”],
pip uninstall selenium
pip install selenium==3.0.1&lt;/p&gt;
&lt;p&gt;fbo与p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android性能</title>
    <link href="http://wodekouwei.com/2019/01/30/at-android-performance/"/>
    <id>http://wodekouwei.com/2019/01/30/at-android-performance/</id>
    <published>2019-01-30T04:20:22.000Z</published>
    <updated>2019-02-28T09:38:03.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流畅度"><a href="#流畅度" class="headerlink" title="流畅度"></a>流畅度</h3><p>人为感受的性能不好属于下面两种:</p>
<ol>
<li>响应时间,界面跳转后响应时间</li>
<li>流畅度,界面操作时或动画展示的效果</li>
</ol>
<p>流畅度的衡量指标:</p>
<ol>
<li>帧率fps</li>
<li>丢帧SF(Skipped frame)</li>
<li>流畅度SM(SMoothness)</li>
</ol>
<p>帧率计算:</p>
<ol>
<li><code>adb shell dumpsys gfxinfo &lt;PACKAGE_NAME&gt;</code></li>
<li><code>adb shell dumpsys SurfaceFlinger --latency &lt;window_activity&gt;</code></li>
</ol>
<p><a href="https://blog.csdn.net/itfootball/article/details/43084527" target="_blank" rel="external">https://blog.csdn.net/itfootball/article/details/43084527</a>
<a href="https://developer.android.com/training/testing/performance?hl=zh-cn" target="_blank" rel="external">https://developer.android.com/training/testing/performance?hl=zh-cn</a>
<a href="https://testerhome.com/topics/4441" target="_blank" rel="external">https://testerhome.com/topics/4441</a>
<a href="https://testerhome.com/topics/4643" target="_blank" rel="external">https://testerhome.com/topics/4643</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;流畅度&quot;&gt;&lt;a href=&quot;#流畅度&quot; class=&quot;headerlink&quot; title=&quot;流畅度&quot;&gt;&lt;/a&gt;流畅度&lt;/h3&gt;&lt;p&gt;人为感受的性能不好属于下面两种:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;响应时间,界面跳转后响应时间&lt;/li&gt;
&lt;li&gt;流畅度,界面操作时或动画
    
    </summary>
    
      <category term="autotest" scheme="http://wodekouwei.com/categories/autotest/"/>
    
    
      <category term="android" scheme="http://wodekouwei.com/tags/android/"/>
    
      <category term="autotest" scheme="http://wodekouwei.com/tags/autotest/"/>
    
      <category term="tools" scheme="http://wodekouwei.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>python之基础语法</title>
    <link href="http://wodekouwei.com/2019/01/18/l-python-basic/"/>
    <id>http://wodekouwei.com/2019/01/18/l-python-basic/</id>
    <published>2019-01-18T08:29:11.000Z</published>
    <updated>2019-01-30T04:16:55.306Z</updated>
    
    <content type="html"><![CDATA[<h6 id="python清空列表"><a href="#python清空列表" class="headerlink" title="python清空列表"></a>python清空列表</h6><ol>
<li>在非函数参数的list中使用<code>del list_new[]</code>或者<code>list_new = []</code>来清空列表</li>
<li>对于作为函数中的list,方法1行不通,因为函数执行后,list长度是不变的,但是可以在函数中释放一个参数list所占内存:<code>del list_new[:]</code>或者<code>list_new[:] = []</code>达到清空列表的目的,速度快,并且彻底</li>
</ol>
<h6 id="查看对象占用内存大小"><a href="#查看对象占用内存大小" class="headerlink" title="查看对象占用内存大小"></a>查看对象占用内存大小</h6><p>os.getsizeof(1.0)</p>
<h6 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import struct</div><div class="line">    import math</div><div class="line">    print(&quot;1000.003 is %s&quot; %(int(struct.pack(&apos;&gt;f&apos;, 1000.003).encode(&apos;hex&apos;), 16)))</div><div class="line">    print(&quot;1000.003 is %s&quot; %(struct.pack(&apos;&gt;I&apos;, 1000)))</div><div class="line">    #print(&quot;1000.003 is %d&quot; %(int(floor(1000.003))))</div></pre></td></tr></table></figure>
<p>IEEE 754标准是IEEE二进制浮点数算术标准(IEEE Standard for Floating-Point Arithmetic)的标准编号,它规定了浮点数在计算机当中的存储方式以及算术标准.
计算机中数据均是按二进制的方式存储的,浮点数的存储也是如此.但是由于浮点数的特殊性,无法采用整数的补码存储方式,浮点数需要有特定的存储方式.一个浮点数可以分成3部分存储:</p>
<ul>
<li>sign(符号)</li>
<li>exponent(指数)</li>
<li>fraction(尾数)</li>
</ul>
<p><a href="https://en.wikipedia.org/wiki/IEEE_754-1985" target="_blank" rel="external">https://en.wikipedia.org/wiki/IEEE_754-1985</a></p>
<h6 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h6><p>本地模块名和系统库模块名冲突报:
ImportError: cannot import name AttrItem
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import configparser </div><div class="line">print configparser.__file__</div></pre></td></tr></table></figure></p>
<p>自定义configparser与系统冲突,通过打印<strong>file</strong>查看</p>
]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;python清空列表&quot;&gt;&lt;a href=&quot;#python清空列表&quot; class=&quot;headerlink&quot; title=&quot;python清空列表&quot;&gt;&lt;/a&gt;python清空列表&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;在非函数参数的list中使用&lt;code&gt;del list_new
    
    </summary>
    
      <category term="language" scheme="http://wodekouwei.com/categories/language/"/>
    
    
      <category term="language" scheme="http://wodekouwei.com/tags/language/"/>
    
      <category term="python" scheme="http://wodekouwei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python之函数</title>
    <link href="http://wodekouwei.com/2019/01/17/l-python-method/"/>
    <id>http://wodekouwei.com/2019/01/17/l-python-method/</id>
    <published>2019-01-17T04:15:33.000Z</published>
    <updated>2019-01-17T09:50:11.701Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li>位置参数: <code>def power(x):</code></li>
<li>默认参数: <code>def power(x, n=2):</code> 默认参数必须指向不变对象！</li>
<li>可变参数: <code>def calc(*numbers):</code></li>
<li>关键字参数: <code>def person(name, age, **kw):</code></li>
<li>命名关键字参数:<code>def person(name, age, *, city, job):</code></li>
</ul>
<p>参数组合:
在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数</p>
<p>递归及尾递归优化</p>
<p>切片</p>
<p>迭代 
默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.values()，如果要同时迭代key和value，可以用for k, v in d.items()。
通过collections模块的Iterable类型判断一个对象是否可迭代
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from collections import Iterable</div><div class="line">&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable) # str是否可迭代</div><div class="line">True</div><div class="line">&gt;&gt;&gt; isinstance([1,2,3], Iterable) # list是否可迭代</div><div class="line">True</div><div class="line">&gt;&gt;&gt; isinstance(123, Iterable) # 整数是否可迭代</div><div class="line">False</div></pre></td></tr></table></figure></p>
<p>如果要对list实现类似Java那样的下标循环怎么办？Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; for i, value in enumerate([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]):</div><div class="line">...     print(i, value)</div><div class="line">...</div><div class="line">0 A</div><div class="line">1 B</div><div class="line">2 C</div></pre></td></tr></table></figure></p>
<p>列表生成器
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">list(range(1, 11))</div><div class="line">[x * x for x in range(1, 11)]</div><div class="line">[x * x for x in range(1, 11) if x % 2 == 0]</div><div class="line">[m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;]</div><div class="line"></div><div class="line">&gt;&gt;&gt; import os</div><div class="line">&gt;&gt;&gt; [d for d in os.listdir(&apos;.&apos;)] # os.listdir可以列出文件和目录</div><div class="line">[&apos;.emacs.d&apos;, &apos;.ssh&apos;, &apos;.Trash&apos;, &apos;Adlm&apos;, &apos;Applications&apos;, &apos;Desktop&apos;, &apos;Documents&apos;, &apos;Downloads&apos;, &apos;Library&apos;, &apos;Movies&apos;, &apos;Music&apos;, &apos;Pictures&apos;, &apos;Public&apos;, &apos;VirtualBox VMs&apos;, &apos;Workspace&apos;, &apos;XCode&apos;]</div><div class="line"></div><div class="line">&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;</div><div class="line">&gt;&gt;&gt; [k + &apos;=&apos; + v for k, v in d.items()]</div><div class="line">[&apos;y=B&apos;, &apos;x=A&apos;, &apos;z=C&apos;]</div><div class="line"></div><div class="line">&gt;&gt;&gt; L = [&apos;Hello&apos;, &apos;World&apos;, &apos;IBM&apos;, &apos;Apple&apos;]</div><div class="line">&gt;&gt;&gt; [s.lower() for s in L]</div><div class="line">[&apos;hello&apos;, &apos;world&apos;, &apos;ibm&apos;, &apos;apple&apos;]</div></pre></td></tr></table></figure></p>
<p>生成器：generator 不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制
方法一:只要把一个列表生成式的[]改成()，就创建了一个generator：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; L = [x * x for x in range(10)]</div><div class="line">&gt;&gt;&gt; L</div><div class="line">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</div><div class="line">&gt;&gt;&gt; g = (x * x for x in range(10))</div><div class="line">&gt;&gt;&gt; g</div><div class="line">&lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt;</div></pre></td></tr></table></figure></p>
<p>创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">0</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">1</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">4</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">9</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">16</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">25</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">36</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">49</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">64</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">81</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">StopIteration</div></pre></td></tr></table></figure></p>
<p>断调用next(g)实在是太变态了，正确的方法是使用for循环，因为generator也是可迭代对象：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; g = (x * x for x in range(10))</div><div class="line">&gt;&gt;&gt; for n in g:</div><div class="line">...     print(n)</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：
函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</p>
<p>迭代器</p>
<p>高阶函数
map/reduce
map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。
reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：</p>
<p>filter: 用于过滤序列</p>
<p>sorted: 对list进行排序</p>
<p>返回函数</p>
<p>匿名函数</p>
<p>装饰器
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def log(func):</div><div class="line">    def wrapper(*args, **kw):</div><div class="line">        print(&apos;call %s():&apos; % func.__name__)</div><div class="line">        return func(*args, **kw)</div><div class="line">    return wrapper</div></pre></td></tr></table></figure></p>
<p>偏函数
functools.partial</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;函数参数&quot;&gt;&lt;a href=&quot;#函数参数&quot; class=&quot;headerlink&quot; title=&quot;函数参数&quot;&gt;&lt;/a&gt;函数参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;位置参数: &lt;code&gt;def power(x):&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认参数: &lt;code&gt;de
    
    </summary>
    
      <category term="language" scheme="http://wodekouwei.com/categories/language/"/>
    
    
      <category term="language" scheme="http://wodekouwei.com/tags/language/"/>
    
      <category term="python" scheme="http://wodekouwei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python之面向对象</title>
    <link href="http://wodekouwei.com/2019/01/17/l-python-class/"/>
    <id>http://wodekouwei.com/2019/01/17/l-python-class/</id>
    <published>2019-01-17T02:48:57.000Z</published>
    <updated>2019-01-17T03:12:17.806Z</updated>
    
    <content type="html"><![CDATA[<h6 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a><code>__slots__</code></h6><p>限制类的绑定属性</p>
<p><code>__str__</code>: print打印对象,返回用户看到的字符串
<code>__repr__</code>:返回程序开发者看到的字符串,如直接输入变量,是为调试服务的 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Student(object):</div><div class="line">    def __str__(self):</div><div class="line">    return &apos;Student object (name: %s)&apos; % self.name</div><div class="line"></div><div class="line">print(Student(&apos;hell0&apos;))</div></pre></td></tr></table></figure></p>
<p>可以直接:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__repr = __str__</div></pre></td></tr></table></figure></p>
<p><code>__iter__</code>: 一个类用于for…in循环
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Fib(object):</div><div class="line">    def __init__(self):</div><div class="line">        self.a, self.b = 0, 1</div><div class="line"></div><div class="line">    def __iter__(self):</div><div class="line">        return self</div><div class="line">    </div><div class="line">    def __next__(self):</div><div class="line">        self.a, self.b = self.b, self.a+self.b</div><div class="line">        if self.a &gt; 100000:</div><div class="line">            raise StopIteration()</div><div class="line">        return self.a</div><div class="line"></div><div class="line">for n in Fib():</div><div class="line">    print(n)</div></pre></td></tr></table></figure></p>
<p><code>__getitem__</code>:Fib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第5个元素：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Fib()[5]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: &apos;Fib&apos; object does not support indexing</div></pre></td></tr></table></figure></p>
<p>要表现得像list那样按照下标取出元素，需要实现<strong>getitem</strong>()方法：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Fib(object):</div><div class="line">    def __getitem__(self, n):</div><div class="line">        a, b = 1, 1</div><div class="line">        for x in range(n):</div><div class="line">            a, b = b, a + b</div><div class="line">        return a</div></pre></td></tr></table></figure></p>
<p>但是list有个神奇的切片方法：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; list(range(100))[5:10]</div></pre></td></tr></table></figure></p>
<p>对于Fib却报错,原因是<strong>getitem</strong>()传入的参数可能是一个int,也可能是一个切片对象slice,所以要做判断
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">def __getitem__(self, n):</div><div class="line">        if isinstance(n, int): # n是索引</div><div class="line">            a, b = 1, 1</div><div class="line">            for x in range(n):</div><div class="line">                a, b = b, a + b</div><div class="line">            return a</div><div class="line">        if isinstance(n, slice): # n是切片</div><div class="line">            start = n.start</div><div class="line">            stop = n.stop</div><div class="line">            if start is None:</div><div class="line">                start = 0</div><div class="line">            a, b = 1, 1</div><div class="line">            L = []</div><div class="line">            for x in range(stop):</div><div class="line">                if x &gt;= start:</div><div class="line">                    L.append(a)</div><div class="line">                a, b = b, a + b</div><div class="line">            return L</div></pre></td></tr></table></figure></p>
<p>但是现在没有对step参数处理f[:10:2],也没有对负数做处理
此外，如果把对象看成dict，<strong>getitem</strong>()的参数也可能是一个可以作key的object，例如str。
与之对应的是<strong>setitem</strong>()方法，把对象视作list或dict来对集合赋值。最后，还有一个<strong>delitem</strong>()方法，用于删除某个元素。
总之，通过上面的方法，我们自己定义的类表现得和Python自带的list、tuple、dict没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p>
<p><code>__getattr__</code>:动态返回一个属性。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Student(object):</div><div class="line"></div><div class="line">    def __init__(self):</div><div class="line">        self.name = &apos;Michael&apos;</div><div class="line"></div><div class="line">    def __getattr__(self, attr):</div><div class="line">        if attr==&apos;score&apos;:</div><div class="line">            return 99</div></pre></td></tr></table></figure></p>
<p>当调用不存在的属性时，比如score，Python解释器会试图调用<strong>getattr</strong>(self, ‘score’)来尝试获得属性，这样，我们就有机会返回score的值：
注意，只有在没有找到属性的情况下，才调用<strong>getattr</strong>，已有的属性，比如name，不会在<strong>getattr</strong>中查找</p>
<p><code>__call__</code>:一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用instance.method()来调用。能不能直接在实例本身上调用呢？在Python中，答案是肯定的。</p>
<p>任何类，只需要定义一个<strong>call</strong>()方法，就可以直接对实例进行调用。请看示例
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Student(object):</div><div class="line">    def __init__(self, name):</div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    def __call__(self):</div><div class="line">        print(&apos;My name is %s.&apos; % self.name)</div></pre></td></tr></table></figure></p>
<p>调用方式如下：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = Student(&apos;Michael&apos;)</div><div class="line">&gt;&gt;&gt; s() # self参数不要传入</div><div class="line">My name is Michael.</div></pre></td></tr></table></figure></p>
<p><code>__call__()</code>还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p>
<p>怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个Callable对象，比如函数和我们上面定义的带有<strong>call</strong>()的类实例：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; callable(Student())</div><div class="line">True</div><div class="line">&gt;&gt;&gt; callable(max)</div><div class="line">True</div><div class="line">&gt;&gt;&gt; callable([1, 2, 3])</div><div class="line">False</div><div class="line">&gt;&gt;&gt; callable(None)</div><div class="line">False</div><div class="line">&gt;&gt;&gt; callable(&apos;str&apos;)</div><div class="line">False</div></pre></td></tr></table></figure></p>
<h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from enum import Enum</div><div class="line"></div><div class="line">Month = Enum(&apos;Month&apos;, (&apos;Jan&apos;, &apos;Feb&apos;, &apos;Mar&apos;, &apos;Apr&apos;, &apos;May&apos;, &apos;Jun&apos;, &apos;Jul&apos;, &apos;Aug&apos;, &apos;Sep&apos;, &apos;Oct&apos;, &apos;Nov&apos;, &apos;Dec&apos;))</div><div class="line"></div><div class="line">for name, member in Month.__members__.items():</div><div class="line">    print(name, &apos;=&gt;&apos;, member, &apos;,&apos;, member.value)</div></pre></td></tr></table></figure>
<p>value属性则是自动赋给成员的int常量，默认从1开始计数。
如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from enum import Enum, unique</div><div class="line"></div><div class="line">@unique</div><div class="line">class Weekday(Enum):</div><div class="line">    Sun = 0 # Sun的value被设定为0</div><div class="line">    Mon = 1</div><div class="line">    Tue = 2</div><div class="line">    Wed = 3</div><div class="line">    Thu = 4</div><div class="line">    Fri = 5</div><div class="line">    Sat = 6</div></pre></td></tr></table></figure></p>
<p>@unique装饰器可以帮助我们检查保证没有重复值。</p>
<p>访问这些枚举类型可以有若干种方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; day1 = Weekday.Mon</div><div class="line">&gt;&gt;&gt; print(day1)</div><div class="line">Weekday.Mon</div><div class="line">&gt;&gt;&gt; print(Weekday.Tue)</div><div class="line">Weekday.Tue</div><div class="line">&gt;&gt;&gt; print(Weekday[&apos;Tue&apos;])</div><div class="line">Weekday.Tue</div><div class="line">&gt;&gt;&gt; print(Weekday.Tue.value)</div><div class="line">2</div><div class="line">&gt;&gt;&gt; print(day1 == Weekday.Mon)</div><div class="line">True</div><div class="line">&gt;&gt;&gt; print(day1 == Weekday.Tue)</div><div class="line">False</div><div class="line">&gt;&gt;&gt; print(Weekday(1))</div><div class="line">Weekday.Mon</div><div class="line">&gt;&gt;&gt; print(day1 == Weekday(1))</div><div class="line">True</div><div class="line">&gt;&gt;&gt; Weekday(7)</div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">ValueError: 7 is not a valid Weekday</div><div class="line">&gt;&gt;&gt; for name, member in Weekday.__members__.items():</div><div class="line">...     print(name, &apos;=&gt;&apos;, member)</div><div class="line">...</div><div class="line">Sun =&gt; Weekday.Sun</div><div class="line">Mon =&gt; Weekday.Mon</div><div class="line">Tue =&gt; Weekday.Tue</div><div class="line">Wed =&gt; Weekday.Wed</div><div class="line">Thu =&gt; Weekday.Thu</div><div class="line">Fri =&gt; Weekday.Fri</div><div class="line">Sat =&gt; Weekday.Sat</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;slots&quot;&gt;&lt;a href=&quot;#slots&quot; class=&quot;headerlink&quot; title=&quot;__slots__&quot;&gt;&lt;/a&gt;&lt;code&gt;__slots__&lt;/code&gt;&lt;/h6&gt;&lt;p&gt;限制类的绑定属性&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt;:
    
    </summary>
    
      <category term="language" scheme="http://wodekouwei.com/categories/language/"/>
    
    
      <category term="language" scheme="http://wodekouwei.com/tags/language/"/>
    
      <category term="python" scheme="http://wodekouwei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>vscode使用技巧</title>
    <link href="http://wodekouwei.com/2019/01/15/evn-mac-vscode/"/>
    <id>http://wodekouwei.com/2019/01/15/evn-mac-vscode/</id>
    <published>2019-01-15T02:31:09.000Z</published>
    <updated>2019-02-13T06:49:14.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="设置隐藏文件"><a href="#设置隐藏文件" class="headerlink" title="设置隐藏文件"></a>设置隐藏文件</h3><p>用于在资源管理器隐藏固定后缀的文件,配置方式:</p>
<ol>
<li>首选项-&gt;设置</li>
<li>搜索files.exclude,选择工作区设置</li>
<li>添加模式:<code>**/*.pyc</code></li>
</ol>
<h2 id="Creating-your-own-snippets"><a href="#Creating-your-own-snippets" class="headerlink" title="Creating your own snippets"></a>Creating your own snippets</h2><p>既然你点开了这个页面，那就说明要么你不知道 VSCode 上已有拓展「C/C++ Snippets」，要么你对这个拓展不甚满意。对于后者，本文将为你介绍如何在 VSCode 上设置 snippets，并为你提供一套可以直接用的 C 语言 snippets。</p>
<h3 id="1-snippet-简介"><a href="#1-snippet-简介" class="headerlink" title="1. snippet 简介"></a>1. snippet 简介</h3><p>snippet[ˈsnɪpɪt]，或者说「code snippet」，也即代码段，指的是能够帮助输入重复代码模式，比如循环或条件语句，的模板。通过 snippet ，我们仅仅输入一小段字符串，就可以在代码段引擎的帮助下，生成预定义的模板代码，接着我们还可以通过在预定义的光标位置之间跳转，来快速补全模板。</p>
<p>当然，看图更易懂。下图将 aja 补全为 JQuery 的 ajax() 方法，并通过光标的跳转，快速补全了待填键值对：
<img src="https://code.visualstudio.com/assets/docs/editor/userdefinedsnippets/ajax-snippet.gif" alt="image"></p>
<h3 id="2-snippet-配置流程"><a href="#2-snippet-配置流程" class="headerlink" title="2. snippet 配置流程"></a>2. snippet 配置流程</h3><p>进入 snippet 设置文件，这里提供了三种方法： 
通过快捷键「Ctrl + Shift + P」打开命令窗口（All Command Window），输入「snippet」，点选「首选项：配置用户代码段片段」；
点击界面最左侧竖栏（也即活动栏）最下方的齿轮按钮，在弹出来的菜单中点选「用户代码片段」；
按下「Alt」键切换菜单栏，通过文件 &gt; 首选项 &gt; 用户代码片段；
填写 snippets</p>
<h3 id="3-snippet-详细介绍"><a href="#3-snippet-详细介绍" class="headerlink" title="3. snippet 详细介绍"></a>3. snippet 详细介绍</h3><h4 id="3-1-引子"><a href="#3-1-引子" class="headerlink" title="3.1 引子"></a>3.1 引子</h4><p>设置文件头部的一个块注释给出了设置 snippet 的格式，了解过「json」就不会对此感到奇怪。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Place your snippets for C here. Each snippet is defined under a snippet name and has a prefix, body and </div><div class="line"> // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</div><div class="line"> // $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </div><div class="line"> // same ids are connected.</div><div class="line"> // Example:</div><div class="line"> &quot;Print to console&quot;: &#123;</div><div class="line">    &quot;prefix&quot;: &quot;log&quot;,,</div><div class="line">    &quot;body&quot;: [</div><div class="line">        &quot;console.log(&apos;$1&apos;);&quot;,</div><div class="line">        &quot;$2&quot;</div><div class="line">    ],</div><div class="line">    &quot;description&quot;: &quot;Log output to console&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上例定义了一个名为「Print to console」的 snippet，其功能为：在输入 log 并确认后，可将原文本替换为console.log(‘’);</p>
<h4 id="3-2-语法结构"><a href="#3-2-语法结构" class="headerlink" title="3.2 语法结构"></a>3.2 语法结构</h4><p>然而引子中只是最简单的功能，而 VSCode 的代码段引擎所能做的远不止这些。本文将以官方教程1为本，对其进行详实地阐述。</p>
<p>snippet 由三部分组成：</p>
<ol>
<li>prefix：前缀，定义了 snippets 从 IntelliSense 中呼出的关键字;</li>
<li>body： 主体，即模板的主体内容，其中每个字符串表示一行;</li>
<li>description：说明，会在 IntelliSense 候选栏中出现。未定义的情况下直接显示对象名，上例中将会显示 Print to console。
Snippet 的三个部分目前只有主体部分支持丰富的特性。接下来整篇文章都是拿来介绍主体部分的。主体部分的介绍将分为两部分：较为直接的基础用法，及结合正则表达式的高级用法。</li>
</ol>
<h4 id="3-3-Body-基本用法"><a href="#3-3-Body-基本用法" class="headerlink" title="3.3 Body - 基本用法"></a>3.3 Body - 基本用法</h4><p>主体部分可以使用特殊语法结构，来控制光标和要插入的文本，其支持的基本结构如下：</p>
<ol>
<li><p>Tabstops：制表符 
用「Tabstops」可以让编辑器的指针在 snippet 内跳转。使用 $1，$2 等指定光标位置。这些数字指定了光标跳转的顺序。特别地，$0表示最终光标位置。相同序号的「Tabstops」被链接在一起，将会同步更新，比如下列用于生成头文件封装的 snippet 被替换到编辑器上时，光标就将同时出现在所有$1位置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;#ifndef $1&quot;</div><div class="line">&quot;#define $1&quot;</div><div class="line">&quot;#end // $1&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>Placeholders：占位符 
「Placeholder」是带有默认值的「Tabstops」，如${1：foo}。「placeholder」文本将被插入「Tabstops」位置，并在跳转时被全选，以方便修改。占位符还可以嵌套，例如${1:another ${2:placeholder}}。
比如，结构体的 snippet 主体可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">struct $&#123;1:name_t&#125; &#123;\n\t$2\n&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>作为「Placeholder」的name_t一方面可以提供默认的结构名称，另一方面可以作为输入的提示。</p>
<ol>
<li><p>Choice：可选项
「Choice」是提供可选值的「Placeholder」。其语法为一系列用逗号隔开，并最终被两个竖线圈起来的枚举值，比如 ${1|one,two,three|}。当光标跳转到该位置的时候，用户将会被提供多个值（one 或 two 或 three）以供选择。</p>
</li>
<li><p>Variables：变量
使用$name或${name:default}可以插入变量的值。当变量未赋值时（如），将插入其缺省值或空字符串。 当varibale未知（即，其名称未定义）时，将插入变量的名称，并将其转换为「Placeholder」。可以使用的「Variable」如下：</p>
</li>
</ol>
<ul>
<li>TM_SELECTED_TEXT：当前选定的文本或空字符串； </li>
<li>注：选定后通过在命令窗口点选「插入代码片段」插入。</li>
<li>TM_CURRENT_LINE：当前行的内容；</li>
<li>TM_CURRENT_WORD：光标所处单词或空字符串 </li>
<li>注：所谓光标一般为文本输入处那条闪来闪去的竖线，该项可定制。单词使用 VSCode 选词（Word Wrap）器选择。你最好只用它选择英文单词，因为这个选择器明显没有针对宽字符优化过，它甚至无法识别宽字符的标点符号。</li>
<li>TM_LINE_INDEX：行号（从零开始）；</li>
<li>TM_LINE_NUMBER：行号（从一开始）；</li>
<li>TM_FILENAME：当前文档的文件名；</li>
<li>TM_FILENAME_BASE：当前文档的文件名（不含后缀名）；</li>
<li>TM_DIRECTORY：当前文档所在目录；</li>
<li>TM_FILEPATH：当前文档的完整文件路径；</li>
<li><p>CLIPBOARD：当前剪贴板中内容。
此外，还有一些用于插入当前时间的变量，这里单独列出：</p>
</li>
<li><p>CURRENT_YEAR: 当前年份；</p>
</li>
<li>CURRENT_YEAR_SHORT: 当前年份的后两位；</li>
<li>CURRENT_MONTH: 格式化为两位数字的当前月份，如 02；</li>
<li>CURRENT_MONTH_NAME: 当前月份的全称，如 July；</li>
<li>CURRENT_MONTH_NAME_SHORT: 当前月份的简称，如 Jul；</li>
<li>CURRENT_DATE: 当天月份第几天；</li>
<li>CURRENT_DAY_NAME: 当天周几，如 Monday；</li>
<li>CURRENT_DAY_NAME_SHORT: 当天周几的简称，如 Mon；</li>
<li>CURRENT_HOUR: 当前小时（24 小时制）；</li>
<li>CURRENT_MINUTE: 当前分钟；</li>
<li>CURRENT_SECOND: 当前秒数。
注：这些都是变量名，不是宏，在实际使用的时要加上 $ 符。</li>
</ul>
<h4 id="3-4-Body-高级语法"><a href="#3-4-Body-高级语法" class="headerlink" title="3.4 Body - 高级语法"></a>3.4 Body - 高级语法</h4><h5 id="3-4-1-变量转换"><a href="#3-4-1-变量转换" class="headerlink" title="3.4.1 变量转换"></a>3.4.1 变量转换</h5><p>变量转换可将变量的值格式化处理后插入预定的位置。</p>
<h6 id="3-4-1-1-语法结构"><a href="#3-4-1-1-语法结构" class="headerlink" title="3.4.1.1 语法结构"></a>3.4.1.1 语法结构</h6><p>我们可以通过 ${var_name/regular_expression/format_string/options} 插入格式化后的代码段。显然，「variable transformations」由 4 部分构成：</p>
<ol>
<li>var_name：变量名；</li>
<li>regular_expression：正则表达式；</li>
<li>format_string：格式串；</li>
<li>options：正则表达式匹配选项。
其中正则表达式的写法和匹配选项部分不在本篇博文的讲解范围之内，具体内容请分别参考 javascript 有关 RegExp(pattern [, flags]) 构造函数中的 pattern 及 flags 参数项的说明2。</li>
</ol>
<p>本文只对 format_string 部分进行详细介绍。</p>
<h6 id="3-4-1-2-format-string-部分"><a href="#3-4-1-2-format-string-部分" class="headerlink" title="3.4.1.2 format_string 部分"></a>3.4.1.2 format_string 部分</h6><p>根据其 EBNF 范式，我们可以知道 format_string 其实是 format 或 text 的线性组合：</p>
<ol>
<li>text：也即没有任何作用的普通文本，你甚至可以使用汉字；</li>
<li>format：格式串，分为 7 种： </li>
</ol>
<ul>
<li>$sn：表示插入匹配项；</li>
<li>${sn}：同 $sn；</li>
<li>${sn:/upcase} 或 ${sn:/downcase} 或 ${sn:/capitalize}：表示将匹配项变更为「所有字母均大写/所有字母均小写/首字母大写其余小写」后，插入；</li>
<li>${sn:+if}：表示当匹配成功时，并且捕捉括号捕捉特定序号的捕捉项成功时，在捕捉项位置插入「if」所述语句；</li>
<li>${sn:?if:else}：表示当匹配成功，并且捕捉括号捕捉特定序号的捕捉项成功时，在捕捉项位置插入「if」所述语句；否则当匹配成功，但当捕捉括号捕捉特定序号的捕捉项失败时，在捕捉项位置插入「else」所述语句；</li>
<li>${sn:-else}：表示当匹配成功，但当捕捉括号捕捉特定序号的捕捉项失败时，在捕捉项位置插入「else」所述语句；</li>
<li>${sn:else}：同 ${sn:-else}。
format 的后三条理解起来可能比较困难。这里我们以倒数第三条为例进行说明。假设我们有一个「make.c」文件，我们有这么一条 snippet: “body”: “${TM_FILENAME/make.c(pp|++)?/${1:?c++:clang}/}”。整个模式串匹配成功，但是捕捉括号捕捉后缀名中的 pp 或 ++ 失败，因此判断条件在捕捉括号的位置插入捕捉失败时应插入的字符串，也即「clang」。<blockquote>
<p>注：
其中 sn 表示捕捉项的序号
其中 if 表示捕捉项捕捉成功时替换的文本
其中 else 表示捕捉项捕失败时替换的文本</p>
</blockquote>
</li>
</ul>
<h6 id="3-4-1-3-案例分析"><a href="#3-4-1-3-案例分析" class="headerlink" title="3.4.1.3 案例分析"></a>3.4.1.3 案例分析</h6><p>下面笔者再介绍一个简单的例子，帮助大家理解「variable transformations」。</p>
<p>假设有一个名为「make.c」的文件中，并且我们已经定义如下 snippet。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;#ifndef HEADER … #define … #endif&quot;:&#123;</div><div class="line">&quot;prefix&quot;: &quot;defheader&quot;,</div><div class="line">&quot;body&quot;: &quot;#ifndef $&#123;1:$&#123;TM_FILENAME/(.*)\\.C$/$&#123;1:/upcase&#125;_H/i&#125;&#125; \n#define $1 \n$&#123;2:header content&#125;\n#endif\t// $1&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中最复杂的模式为：${1:${TM_FILENAME/(.*)\.C$/${1:/upcase}_H/i}}，我们将之拆解为如下五部分： </p>
<ol>
<li>${1:…}：嵌套的 placeholder； </li>
<li>${TM_FILENAM/…/…/.}：「variable transformations」中的「var_name」，表示带后缀的文件名； </li>
<li>${…/(.*)\.C$/…/.}：「variable transformations」中的「regular_expression」，表示匹配任意以「.C」为后缀的字符串； </li>
<li>${…/…/${1:/upcase}_H/.}}：「variable transformations」中的「options」，表示将第一个捕捉项替换为大写的，并添加「_H」的后缀； </li>
<li>${…/…/…/i}：「variable transformations」中的「options」，表示无视大小写。</li>
</ol>
<h5 id="3-4-2-占位符转换"><a href="#3-4-2-占位符转换" class="headerlink" title="3.4.2 占位符转换"></a>3.4.2 占位符转换</h5><h6 id="3-4-2-1-语法结构"><a href="#3-4-2-1-语法结构" class="headerlink" title="3.4.2.1 语法结构"></a>3.4.2.1 语法结构</h6><p>我们可以通过 ${int/regular_expression/format_string/options} 插入格式化后的代码段。显然，与变量转换，「placeholder transformations」也由 4 部分构成：</p>
<ol>
<li>int：占位符相应光标序号；</li>
<li>regular_expression：正则表达式；</li>
<li>format_string：格式串；</li>
<li>options：正则表达式匹配选项。
上述全部内容我们都在前文介绍过了，因此此处不做赘述。我们唯一需要关注的是转换触发的时机：占位符转换将在进行占位符跳转（假设 1→2）的时候自动适用到当前占位符（1）。</li>
</ol>
<h6 id="3-4-2-2-案例分析"><a href="#3-4-2-2-案例分析" class="headerlink" title="3.4.2.2 案例分析"></a>3.4.2.2 案例分析</h6><p>假设我们已经这样的 Snippet：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;HelloWorld&quot;: &#123;</div><div class="line">  &quot;prefix&quot;: &quot;say_hello&quot;,</div><div class="line">  &quot;body&quot;: &quot;$&#123;1&#125; $&#123;2&#125; -&gt; $&#123;1/Hello/Hallo/&#125; $&#123;2/World/Welt/&#125;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么我们在两个制表位同时键入 Hello 并跳转的时候，第一个制表位依然保持 Hello 不变，而第二个制表位（占位符）被替换为 Hallo。键入 Welt 亦然。</p>
<h4 id="3-5-语法定义"><a href="#3-5-语法定义" class="headerlink" title="3.5 语法定义"></a>3.5 语法定义</h4><p>官网给出了 snippet 的 EBNF 范式的正则文法，注意，作普通字符使用时，$ , } 和 \ 可使用 \（反斜杠）转义。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">any         ::= tabstop | placeholder | choice | variable | text</div><div class="line">tabstop     ::= &apos;$&apos; int</div><div class="line">                | &apos;$&#123;&apos; int &apos;&#125;&apos;</div><div class="line">                | &apos;$&#123;&apos; int  transform &apos;&#125;&apos;</div><div class="line">placeholder ::= &apos;$&#123;&apos; int &apos;:&apos; any &apos;&#125;&apos;</div><div class="line">choice      ::= &apos;$&#123;&apos; int &apos;|&apos; text (&apos;,&apos; text)* &apos;|&#125;&apos;</div><div class="line">variable    ::= &apos;$&apos; var | &apos;$&#123;&apos; var &apos;&#125;&apos;</div><div class="line">                | &apos;$&#123;&apos; var &apos;:&apos; any &apos;&#125;&apos;</div><div class="line">                | &apos;$&#123;&apos; var transform &apos;&#125;&apos;</div><div class="line">transform   ::= &apos;/&apos; regex &apos;/&apos; (format | text)+ &apos;/&apos; options</div><div class="line">format      ::= &apos;$&apos; int | &apos;$&#123;&apos; int &apos;&#125;&apos;</div><div class="line">                | &apos;$&#123;&apos; int &apos;:&apos; &apos;/upcase&apos; | &apos;/downcase&apos; | &apos;/capitalize&apos; &apos;&#125;&apos;</div><div class="line">                | &apos;$&#123;&apos; int &apos;:+&apos; if &apos;&#125;&apos;</div><div class="line">                | &apos;$&#123;&apos; int &apos;:?&apos; if &apos;:&apos; else &apos;&#125;&apos;</div><div class="line">                | &apos;$&#123;&apos; int &apos;:-&apos; else &apos;&#125;&apos; | &apos;$&#123;&apos; int &apos;:&apos; else &apos;&#125;&apos;</div><div class="line">regex       ::= JavaScript Regular Expression value (ctor-string)</div><div class="line">options     ::= JavaScript Regular Expression option (ctor-options)</div><div class="line">var         ::= [_a-zA-Z] [_a-zA-Z0-9]*</div><div class="line">int         ::= [0-9]+</div><div class="line">text        ::= .*</div></pre></td></tr></table></figure></p>
<h3 id="4-一些建议"><a href="#4-一些建议" class="headerlink" title="4. 一些建议"></a>4. 一些建议</h3><p>默认情况下 snippet 在 IntelliSense 中的显示优先级并不高，而且在 IntelliSense 中选择相应 snippet 需要按「enter」键，这对于手指短的人来说并不是什么很好的体验。</p>
<p>所幸，VSCode 意识到了这一点，并为我们提供了改进的方式。我们可以在 VSCode 的用户设置（「Ctrl+P」在输入框中写「user settings」后点选）中，检索代码段，然后根据提示修改代码段的相关设置。</p>
<p>我们可以设置在 IntelliSense 中优先显示代码段，并可以通过「TAB」补全。</p>
<p>修改后设置文件中会多出这两行：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;editor.snippetSuggestions&quot;: &quot;top&quot;,</div><div class="line">&quot;editor.tabCompletion&quot;: true</div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考:<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="external">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a>
<a href="https://blog.csdn.net/maokelong95/article/details/54379046?utm_source=blogxgwz0" target="_blank" rel="external">https://blog.csdn.net/maokelong95/article/details/54379046?utm_source=blogxgwz0</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;h3 id=&quot;设置隐藏文件&quot;&gt;&lt;a href=&quot;#设置隐藏文件&quot; class=&quot;headerlink&quot; title=&quot;设置隐藏文件&quot;&gt;&lt;/a&gt;设
    
    </summary>
    
      <category term="env" scheme="http://wodekouwei.com/categories/env/"/>
    
    
      <category term="Mac" scheme="http://wodekouwei.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Python之字符串</title>
    <link href="http://wodekouwei.com/2019/01/14/l-python-string/"/>
    <id>http://wodekouwei.com/2019/01/14/l-python-string/</id>
    <published>2019-01-14T02:26:02.000Z</published>
    <updated>2019-01-14T02:28:27.679Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">str = ‘0123456789’</div><div class="line">print str[0:3] #截取第一位到第三位的字符</div><div class="line">print str[:] #截取字符串的全部字符</div><div class="line">print str[6:] #截取第七个字符到结尾</div><div class="line">print str[:-3] #截取从头开始到倒数第三个字符之前</div><div class="line">print str[2] #截取第三个字符</div><div class="line">print str[-1] #截取倒数第一个字符</div><div class="line">print str[::-1] #创造一个与原字符串顺序相反的字符串</div><div class="line">print str[-3:-1] #截取倒数第三位与倒数第一位之前的字符</div><div class="line">print str[-3:] #截取倒数第三位到结尾</div><div class="line">print str[:-5:-3] #逆序截取，具体啥意思没搞明白？</div></pre></td></tr></table></figure>
<p>输出结果:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">012</div><div class="line">0123456789</div><div class="line">6789</div><div class="line">0123456</div><div class="line">2</div><div class="line">9</div><div class="line">987654321</div><div class="line">78</div><div class="line">789</div><div class="line">96</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;字符串截取&quot;&gt;&lt;a href=&quot;#字符串截取&quot; class=&quot;headerlink&quot; title=&quot;字符串截取&quot;&gt;&lt;/a&gt;字符串截取&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
    
    </summary>
    
      <category term="language" scheme="http://wodekouwei.com/categories/language/"/>
    
    
      <category term="language" scheme="http://wodekouwei.com/tags/language/"/>
    
      <category term="python" scheme="http://wodekouwei.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>gradle使用</title>
    <link href="http://wodekouwei.com/2019/01/10/tool-gradle/"/>
    <id>http://wodekouwei.com/2019/01/10/tool-gradle/</id>
    <published>2019-01-10T10:38:26.000Z</published>
    <updated>2019-01-11T10:49:29.144Z</updated>
    
    <content type="html"><![CDATA[<p>gradle命令:</p>
<ul>
<li>gradle -v                  //版本号</li>
<li>gradle clean               //清除build文件夹</li>
<li>gradle build               //检查依赖并打包</li>
<li>gradle assembleDebug       //编译打包Debug包</li>
<li>gradle assembleRelease     //编译打包Release包</li>
<li>gradle installRelease      //打包并安装Release包</li>
<li>gradle unstallRelease      //卸载Release包</li>
<li>gradle dependencies        //查看依赖图表</li>
<li>gradle clean build -x test //跳过测试编译</li>
<li>gradle –profile build     //分析构建任务</li>
<li>gradle build –dry-run     //编译并不执行任务</li>
<li>gradle install             //安置项目jar包到本地Maven仓库</li>
<li>gradle tasks               //查看Gradle任务</li>
<li>gradle tasks –all         //查看所有Gradle任务</li>
<li>gradle build –daemon      //使用Gradle守护程序(Daemon)</li>
<li>gradle build –offline     //用离线模式运行</li>
<li>gradle clean build –refresh-dependencies     //刷新Gradle依赖缓存</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gradle命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gradle -v                  //版本号&lt;/li&gt;
&lt;li&gt;gradle clean               //清除build文件夹&lt;/li&gt;
&lt;li&gt;gradle build           
    
    </summary>
    
      <category term="工具" scheme="http://wodekouwei.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://wodekouwei.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Mac下快捷键</title>
    <link href="http://wodekouwei.com/2019/01/09/env-mac-keymap/"/>
    <id>http://wodekouwei.com/2019/01/09/env-mac-keymap/</id>
    <published>2019-01-09T01:56:49.000Z</published>
    <updated>2019-02-28T10:27:20.082Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AndroidStudio-IntelliJ-快捷键"><a href="#AndroidStudio-IntelliJ-快捷键" class="headerlink" title="AndroidStudio/IntelliJ 快捷键"></a>AndroidStudio/IntelliJ 快捷键</h3><p>之前一直用windows版的eclipse快捷键,现在准备切成mac原生快捷键映射.</p>
<p>特殊符号 :</p>
<ul>
<li>Command () : ⌘ ; </li>
<li>Control : ⌃ ; </li>
<li>Option (alt) : ⌥ ; </li>
<li>Shift : ⇧ ; </li>
<li>Caps Lock : ⇪ ;</li>
</ul>
<h4 id="常用"><a href="#常用" class="headerlink" title="常用:"></a>常用:</h4><ul>
<li>cmd + F12: 快速定位到方法和属性</li>
<li>ctrl + o : 查看所有可重写的方法</li>
<li>ctrl + I : 引入接口或抽象类方法的实现</li>
<li>cmd + o : 全局查找类</li>
<li>opt + cmd + o : 全局搜索类/方法/参数</li>
<li>cmd + f7 : 查看该方法在当前类中被用到的地方</li>
<li>alt + f7 : find usages</li>
<li>cmd + ][ : back</li>
<li>shift + cmd + f : 全局查找</li>
<li>cmd + d : 快捷向下复制</li>
<li>cmd + shift + enter : editor actions-&gt;complete current statement,不管光标在哪个位置,直接新开一行</li>
<li>ctrl + spack : main menu-&gt;Code-&gt;Completion-&gt;basic代码提示列表</li>
<li>alt + enter : other-&gt;show intention action, 错误修正提示列表</li>
<li>sht + sht : 搜索任意内容</li>
<li>cmd + f / cmd + r : 当前文件查找/替换</li>
<li>cmd + g / sht + cmd + g : 跳到下一个/上一个高亮的变量</li>
<li>cmd + opt + B : 查看接口的实现</li>
<li>ctrl + opt + H : 方法被调用层级结构</li>
<li>cmd + L : 跳转至行</li>
<li>opt + cmd + T : Surround with 快速调出if, for, try…catch, while等环绕代码</li>
<li>cmd + J : 快速生成模板代码块,如if,while, return</li>
<li>cmd + N : 快速生成getter／setter方法，构造方法，toString()方法等</li>
<li>stf + cmd + enter : 行尾自动添加分号,if后面自动加 “(){}”</li>
<li>cmd + / : 注释和取消注释,注释效果//…</li>
<li>opt + cmd + / : 注释与取消注释,注释效果/…/</li>
<li>sht + cmd + U : 切换大小写</li>
<li>opt + sht + up/down : 上下移动代码</li>
<li>cmd + sht + up/down : 上下代码行换位</li>
<li>opt + cmd + L: 格式化代码</li>
<li>opt + ctrl + o : 清除无效包引用</li>
<li>opt + cmd + M : 方法重构,方法抽离</li>
<li>opt + cmd + P : 抽离成方法参数</li>
<li>opt + cmd + V : 抽离为局部变量</li>
<li>opt + cmd + F : 抽离为成员变量</li>
<li>cmd + left/right : 快速定位到行首行位</li>
<li>cmd + p : 提示参数类型</li>
<li>cmd + y : 预览方法的定义</li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li>Shift+⌘+”+” 展开全部 </li>
<li>Shift+⌘+”-“ 折叠全部 </li>
<li>cmd+”+” 展开当前 </li>
<li>cmd+”-“ 折叠当前</li>
<li></li>
<li>shift+⌘+L 展开文档注释 </li>
<li>ctrl+shift+⌘+L 收起文档注释</li>
<li></li>
<li>⌘+/ 当行注释 </li>
<li>⌘+alt+/ 多行注释</li>
<li></li>
<li>alt+F7 查找使用的位置 </li>
<li>Ctrl+Shift+F FindInPath</li>
<li></li>
<li>shift+f6 重命名</li>
<li></li>
<li>Ctrl+Enter 生成set/get（或者Ctrl+N） </li>
<li>Ctrl+J 查看文档说明（同windows中的ctrl+Q） </li>
<li>Ctrl+O/⌘+O 重写父类方法 </li>
<li>Ctrl+i 实现方法</li>
<li></li>
<li>Ctrl+shift+Q 查看当前光标所在的类 </li>
<li>alt+回车 查看当前元素可以做的操作</li>
<li></li>
<li>alt+⌘+L 格式化代码 </li>
<li>Ctrl+Alt+O 自动导包 </li>
<li>Ctrl+Alt+I 自动缩进行</li>
<li></li>
<li>⌘+Alt+M 抽取方法 </li>
<li>⌘+Alt+V 提取变量（还没尝试） </li>
<li>⌘+Alt+F 提取成员变量 </li>
<li>⌘+Alt+C 提取为常量 </li>
<li>⌘+Alt+P 提取参数</li>
<li></li>
<li>⌘+E 最近操作的文件</li>
<li></li>
<li>⌘+F12 查看当前类的结构 </li>
<li>⌘+B / ⌘+左键单击 查看元素的源码（或者自定义元素的初始化） </li>
<li>Shift+left/right 从光标位置开始，向左/右逐个选中字母</li>
<li></li>
<li>Ctrl+cmd+”+” 窗口最大化（或者恢复窗口模式） </li>
<li>Ctrl+shift+向上箭头 类似win中的win+P(切换窗口)</li>
</ul>
<h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><h4 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h4><ul>
<li>Command + Shift + P / F1  显示命令面板</li>
<li>Command + P 快速打开</li>
<li>Command + Shift + N 打开新窗口</li>
<li>Command + W 关闭窗口</li>
</ul>
<h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><ul>
<li>Command + X 剪切（未选中文本的情况下，剪切光标所在行）</li>
<li>Command + C 复制（未选中文本的情况下，复制光标所在行）</li>
<li>Option + Up 向上移动行</li>
<li>Option + Down 向下移动行</li>
<li>Option + Shift + Up 向上复制行</li>
<li>Option + Shift + Down 向下复制行</li>
<li>Command + Shift + K 删除行</li>
<li>Command + Enter 下一行插入</li>
<li>Command + Shift + Enter 上一行插入</li>
<li>Command + Shift + \ 跳转到匹配的括号</li>
<li>Command + [ 减少缩进</li>
<li>Command + ] 增加缩进</li>
<li>Home 跳转至行首</li>
<li>End 跳转到行尾</li>
<li>Command + Up 跳转至文件开头</li>
<li>Command + Down 跳转至文件结尾</li>
<li>Ctrl + PgUp 按行向上滚动</li>
<li>Ctrl + PgDown 按行向下滚动</li>
<li>Command + PgUp 按屏向上滚动</li>
<li>Command + PgDown 按屏向下滚动</li>
<li>Command + Shift + [ 折叠代码块</li>
<li>Command + Shift + ] 展开代码块</li>
<li>Command + K  Command + [ 折叠全部子代码块</li>
<li>Command + K  Command + ] 展开全部子代码块</li>
<li>Command + K  Command + 0 折叠全部代码块</li>
<li>Command + K  Command + J 展开全部代码块</li>
<li>Command + K  Command + C 添加行注释</li>
<li>Command + K  Command + U 移除行注释</li>
<li>Command + / 添加、移除行注释</li>
<li>Option + Shift + A 添加、移除块注释</li>
<li>Option + Z 自动换行、取消自动换行</li>
</ul>
<h4 id="多光标与选择"><a href="#多光标与选择" class="headerlink" title="多光标与选择"></a>多光标与选择</h4><ul>
<li>Option + 点击 插入多个光标</li>
<li>Command + Option + Up  向上插入光标</li>
<li>Command + Option + Down  向下插入光标</li>
<li>Command + U 撤销上一个光标操作</li>
<li>Option + Shift + I 在所选行的行尾插入光标</li>
<li>Command + I 选中当前行</li>
<li>Command + Shift + L 选中所有与当前选中内容相同部分</li>
<li>Command + F2 选中所有与当前选中单词相同的单词</li>
<li>Command + Ctrl + Shift + Left 折叠选中</li>
<li>Command + Ctrl + Shift + Right 展开选中</li>
<li>Alt + Shift + 拖动鼠标 选中代码块</li>
<li>Command + Shift + Option + Up 列选择 向上</li>
<li>Command + Shift + Option + Down 列选择 向下</li>
<li>Command + Shift + Option + Left 列选择 向左</li>
<li>Command + Shift + Option + Right 列选择 向右</li>
<li>Command + Shift + Option + PgUp 列选择 向上翻页</li>
<li>Command + Shift + Option + PgDown 列选择 向下翻页</li>
</ul>
<h4 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h4><p>Command + F 查找
Command + Option + F 替换
Command + G 查找下一个
Command + Shift + G 查找上一个
Option + Enter 选中所有匹配项
Command + D 向下选中相同内容
Command + K  Command + D 移除前一个向下选中相同内容</p>
<h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p>Ctrl + Space 打开建议
Command + Shift + Space 参数提示
Tab Emmet插件缩写补全
Option + Shift + F 格式化
Command + K Command + F 格式化选中内容
F12 跳转到声明位置
Option + F12 查看具体声明内容
Command + K  F12  分屏查看具体声明内容
Command + . 快速修复
Shift + F12 显示引用
F2 重命名符号
Command + Shift + . 替换为上一个值
Command + Shift + , 替换为下一个值
Command + K Command + X 删除行尾多余空格
Command + K M 更改文件语言</p>
<h4 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h4><p>Command + T 显示所有符号
Ctrl + G 跳转至某行
Command + P 跳转到某个文件
Command + Shift + O 跳转到某个符号
Command + Shift + M 打开问题面板
F8 下一个错误或警告位置
Shift + F8 上一个错误或警告位置
Ctrl + Shift + Tab 编辑器历史记录
Ctrl + - 后退
Ctrl + Shift + - 前进
Ctrl + Shift + M Tab 切换焦点</p>
<h4 id="编辑器管理"><a href="#编辑器管理" class="headerlink" title="编辑器管理"></a>编辑器管理</h4><p>Command + W 关闭编辑器
Command + K  F 关闭文件夹
Command + \  编辑器分屏
Command + 1 切换到第一分组
Command + 2 切换到第二分组
Command + 3  切换到第三分组
Command + K  Command + Left 切换到上一分组
Command + K  Command + Right 切换到下一分组
Command + K  Command + Shift + Left 左移编辑器
Command +  K Command + Shift + Right 右移编辑器
Command +  K Left 激活左侧编辑组
Command +  K Right 激活右侧编辑组</p>
<h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>Command + N 新建文件
Command + O 打开文件
Command + S 保存文件
Command + Shift + S 另存为
Command + Option + S 全部保存
Command + W 关闭
Command + K Command + W 全部关闭
Command + Shift + T 重新打开被关闭的编辑器
Command + K  Enter 保持打开
Ctrl + Tab 打开下一个
Ctrl + Shift + Tab 打开上一个
Command + K  P 复制当前文件路径
Command + K  R 在资源管理器中查看当前文件
Command + K  O 新窗口打开当前文件</p>
<h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p>Command + Ctrl + F 全屏、退出全屏
Command + Option + 1 切换编辑器分屏方式（横、竖）
Command + + 放大
Command + - 缩小
Command + B 显示、隐藏侧边栏
Command + Shift + E 显示资源管理器 或 切换焦点
Command + Shift + F 显示搜索框
Ctrl + Shift + G 显示Git面板
Command + Shift + D 显示调试面板
Command + Shift + X 显示插件面板
Command + Shift + H 全局搜索替换
Command + Shift + J 显示、隐藏高级搜索
Command + Shift + C 打开新终端
Command + Shift + U 显示输出面板
Command + Shift + V Markdown预览窗口
Command + K V 分屏显示 Markdown预览窗口</p>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>F9 设置 或 取消断点
F5 开始 或 继续
F11 进入
Shift + F11 跳出
F10 跳过
Command + K Command + I 显示悬停信息</p>
<h4 id="集成终端"><a href="#集成终端" class="headerlink" title="集成终端"></a>集成终端</h4><p>Ctrl + <code>显示终端
Ctrl + Shift +</code> 新建终端
Command + Up 向上滚动
Command + Down 向下滚动
PgUp 向上翻页
PgDown 向下翻页
Command + Home 滚动到顶部
Command + End 滚动到底部</p>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><h5 id="python格式化代码"><a href="#python格式化代码" class="headerlink" title="python格式化代码"></a>python格式化代码</h5><p><code>pip install yapf</code>安装yapf,安装yapf成功后，打开VScode，文件-&gt;首选项-&gt;用户设置，在settings.json文件中输入”python.formatting.provider”: “yapf”
Alt+Shift+F即可格式化代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AndroidStudio-IntelliJ-快捷键&quot;&gt;&lt;a href=&quot;#AndroidStudio-IntelliJ-快捷键&quot; class=&quot;headerlink&quot; title=&quot;AndroidStudio/IntelliJ 快捷键&quot;&gt;&lt;/a&gt;AndroidS
    
    </summary>
    
      <category term="env" scheme="http://wodekouwei.com/categories/env/"/>
    
    
      <category term="Mac" scheme="http://wodekouwei.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Android权限适配</title>
    <link href="http://wodekouwei.com/2018/12/06/tips-android-permission/"/>
    <id>http://wodekouwei.com/2018/12/06/tips-android-permission/</id>
    <published>2018-12-06T14:39:16.000Z</published>
    <updated>2018-12-17T03:38:48.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态权限"><a href="#动态权限" class="headerlink" title="动态权限"></a>动态权限</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>从Android6.0版本开始google将权限分为普通权限和特殊权限，app必须在AndroidManifest.xml添加引用权限的语句。 在安装apk时安卓会将普通权限授予该app，但特殊权限需要运行时申请。</p>
<p>安卓按照权限类别分为权限组和权限， 每个权限都隶属于一个权限组。 当安卓系统授权一个权限时， 那么该权限所属权限组的权限都会自动被授权。</p>
<p>目前如果app的targetSdkVersion等于21，即按照Android5.0版本特性运行。 技术层面与市场上主流app差距较大， 功能层面也有一些功能可能失效（例如在一些机型上无法打电话、读写SD卡）， 根本原因是没适配动态权限。</p>
<h4 id="如何申请动态权限"><a href="#如何申请动态权限" class="headerlink" title="如何申请动态权限"></a>如何申请动态权限</h4><p>判断当前手机系统是Android6.0及以上版本， 在Activity/Fragment里申请权限并处理权限结果回调。 这里要说明一下：Fragment是通过Activity申请权限的， 且权限回调onRequestPermissionResult也是Activity调用的Fragment该方法.
<img src="http://images.wodekouwei.com/technology/android-permission1.png" alt="image">
上图是权限申请流程图， 我们看到的权限弹窗对应/packages/apps/PackageInstaller/src/com/android/packageinstaller/permission/ui/GrantPermisssionsActivity.java， 点击“同意”或“不同意”通过PackageManager、AppOpsManager将权限操作更新到PackageManagerService和AppOpsService中。</p>
<p>调用Activity的申请权限方法其实是打开一个系统的Activity，操作结果通过setResult返回过来。</p>
<p>能不能直接调用PackageManager/AppOpsManagerd的方法授权给自己？ 显然是不行的， PackageManagerService只允许在AndroidManifest.xml配置coreApp=”true”的应用修改权限，而普通app无法设置coreApp属性。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public int getPermissionFlags(String name, String packageName, int userId) &#123;</div><div class="line">      if (!sUserManager.exists(userId)) &#123;</div><div class="line">          return 0;</div><div class="line">      &#125;</div><div class="line">      //普通app调用该方法会抛异常</div><div class="line">      enforceGrantRevokeRuntimePermissionPermissions(&quot;getPermissionFlags&quot;);</div><div class="line">      enforceCrossUserPermission(Binder.getCallingUid(), userId, true, false,</div><div class="line">              &quot;getPermissionFlags&quot;);</div><div class="line">   ...</div><div class="line">&#125;</div><div class="line"> private void enforceGrantRevokeRuntimePermissionPermissions(String message) &#123;</div><div class="line">      if (mContext.checkCallingOrSelfPermission(Manifest.permission.GRANT_RUNTIME_PERMISSIONS)</div><div class="line">              != PackageManager.PERMISSION_GRANTED</div><div class="line">          &amp;&amp; mContext.checkCallingOrSelfPermission(Manifest.permission.REVOKE_RUNTIME_PERMISSIONS)</div><div class="line">              != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">          throw new SecurityException(message + &quot; requires &quot;</div><div class="line">                  + Manifest.permission.GRANT_RUNTIME_PERMISSIONS + &quot; or &quot;</div><div class="line">                  + Manifest.permission.REVOKE_RUNTIME_PERMISSIONS);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h4 id="如何判断权限"><a href="#如何判断权限" class="headerlink" title="如何判断权限"></a>如何判断权限</h4><p><img src="http:///images.wodekouwei.com/technology/android-permission2.png" alt="image">
如上图所示，判断是否有权限最终会执行到PackagerManagerService的checkUidPermission函数中。</p>
<h4 id="适配动态权限的方式"><a href="#适配动态权限的方式" class="headerlink" title="适配动态权限的方式"></a>适配动态权限的方式</h4><ol>
<li>基本用法：在Activity、Fragment派生类中添加权限申请和结果回调。 坑：1、在插件中调用View的getContext返回值是PluginContext， 无法通过类型强转调用其附着Activity/Fragment的方法。2、如果界面层级很深，需要逐层添加回调参数。</li>
<li>AOP方式，推荐<a href="https://github.com/permissions-dispatcher/PermissionsDispatcher，" target="_blank" rel="external">https://github.com/permissions-dispatcher/PermissionsDispatcher，</a> 在需要权限的函数上添加注解并在构建阶段注入代码。缺点是app插件中有多View控件如BaseCard无法使用。</li>
<li>第三方库<a href="https://github.com/yanzhenjie/AndPermission，" target="_blank" rel="external">https://github.com/yanzhenjie/AndPermission，</a> 原理：新启动个透明Activity申请权限并保存回调函数到静态变量里，用户操作权限提示框结束后通过回调执行成功、失败逻辑。</li>
</ol>
<p>示例代码： 为了避免适配动态权限逻辑产生风险， 可以新增if代码块做动态权限逻辑， else分支仍然是现有逻辑。 各业务线可能无法在同一个版本上搞定， 可以按照这种写法先后完成动态权限适配工作，待所有业务线都完成后调整宿主targetSdkVersion到26。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">if (getBaseContext().getApplicationInfo().targetSdkVersion &gt;= Build.VERSION_CODES.M</div><div class="line">    &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class="line">    AndPermission.with(this)</div><div class="line">        .runtime()</div><div class="line">        .permission(permissions)</div><div class="line">        // .rationale(new RuntimeRationale())</div><div class="line">        .onGranted(new Action&lt;List&lt;String&gt;&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAction(List&lt;String&gt; permissions) &#123;</div><div class="line">                toast(R.string.successfully);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .onDenied(new Action&lt;List&lt;String&gt;&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAction(@NonNull List&lt;String&gt; permissions) &#123;</div><div class="line">                toast(R.string.failure);</div><div class="line">                if (AndPermission.hasAlwaysDeniedPermission(MainActivity.this,</div><div class="line">                    permissions)) &#123;</div><div class="line">                    showSettingDialog(MainActivity.this, permissions);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .start();</div><div class="line">&#125; else &#123;</div><div class="line">    //默认有权限， 用现在的业务逻辑</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li>适配小米机型动态权限；</li>
<li>Android7.0版本开始使用FileProvider， 需要适配拍照功能；</li>
<li>适配DownloadManager安装apk；</li>
<li>用户禁用权限且不再提醒， 需要有个提示框提示用户去应用详情界面里放开权限， 弹窗建议使用CustomDialog(各业务UI样式统一)。</li>
<li>适配WindowManager悬浮窗；</li>
</ol>
<h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><p><a href="https://developer.android.google.cn/training/permissions/requesting" target="_blank" rel="external">官方文档</a>
<a href="https://github.com/yanzhenjie/AndPermission" target="_blank" rel="external">AndPermission</a></p>
<h3 id="AndPermission库解决方案"><a href="#AndPermission库解决方案" class="headerlink" title="AndPermission库解决方案"></a>AndPermission库解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 权限申请其实是startActivityForResult的过程， 弹出的权限提示框是安卓系统应用的GrantPermisssionsActivity.java</div><div class="line"> * 即：申请权限是阻塞的， 在申请权限时当前界面(activity)被GrantPermisssionsActivity盖住了。</div><div class="line"> * 为了实现回调有2种方式：</div><div class="line"> * 1、类似于Glide的做法，在当前activity里添加个空fragment申请权限； 优点是无资源文件，可编译成jar。</div><div class="line"> * 2、新启动个无界面activity申请权限。优点是不限制context类型，缺点是要编译成aar，占位编译只能引用jar，</div><div class="line"> * 打开activity时要依赖链家routerbus。</div><div class="line"> *</div><div class="line"> * 参考新房陈少的实现方式修改，即添加fragment申请权限，返回结果后移除fragment</div><div class="line"> * 没处理8.0的2个新增权限，貌似贝壳没用到</div><div class="line"> *</div><div class="line"> * 备注：</div><div class="line"> *   只是为了集中管理申请权限逻辑，代码要尽量简单好维护。</div><div class="line"> * 1、没有判断入参权限是否在AndroidManifest.xml中声明，感觉没啥必要</div><div class="line"> * 2、申请权限时没有判断是否已经有这个权限了，考虑实际业务场景没添加。</div><div class="line"> * 3、申请&quot;禁用且不再提醒&quot;的权限时会执行返回deny， 不会弹权限申请框。这时需要引导用户去系统设置放开权限。</div><div class="line"> *</div><div class="line"> * 用法：</div><div class="line"> *  LjPermissionUtil.with(MainActivity.this)</div><div class="line"> *             .requestPermissions(Manifest.permission.CAMERA)</div><div class="line"> *             .onCallBack(new LjPermissionUtil.PermissionCallBack() &#123;</div><div class="line"> *               @Override public void onPermissionResult(List&lt;String&gt; granted, List&lt;String&gt; denied) &#123;</div><div class="line"> *                 Log.d(&quot;brycegao&quot;, &quot;onPermissionResult&quot;);</div><div class="line"> *                 if (denied != null &amp;&amp; denied.size() &gt; 0) &#123;</div><div class="line"> *                   boolean isAlwayDeny = LjPermissionUtil.isAlwaysDeniedPermission(MainActivity.this,</div><div class="line"> *                       denied.get(0));</div><div class="line"> *                   //这里要弹出个自定义提示框，引用用户去系统设置里放开权限</div><div class="line"> *                   Log.d(&quot;brycegao&quot;, &quot;&quot;);</div><div class="line"> *                 &#125;</div><div class="line"> *               &#125;</div><div class="line"> *             &#125;).begin();</div><div class="line"> *    集成方式</div><div class="line"> *    compileOnly(&quot;com.lianjia.common.android:lib_permission:1.0.0-SNAPSHOT&quot;) &#123;</div><div class="line"> *     changing = true</div><div class="line"> *   &#125;</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;动态权限&quot;&gt;&lt;a href=&quot;#动态权限&quot; class=&quot;headerlink&quot; title=&quot;动态权限&quot;&gt;&lt;/a&gt;动态权限&lt;/h3&gt;&lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h
    
    </summary>
    
      <category term="Android" scheme="http://wodekouwei.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://wodekouwei.com/tags/Android/"/>
    
      <category term="tips" scheme="http://wodekouwei.com/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程：可重入锁ReentrantLock</title>
    <link href="http://wodekouwei.com/2018/11/13/concurrent-java-reentrantlock/"/>
    <id>http://wodekouwei.com/2018/11/13/concurrent-java-reentrantlock/</id>
    <published>2018-11-13T11:21:54.000Z</published>
    <updated>2018-11-16T04:14:28.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.ibm.com/developerworks/cn/java/j-jtp10264/index.html" target="_blank" rel="external">JDK 5.0 中更灵活、更具可伸缩性的锁定机制</a>
<a href="https://www.cnblogs.com/cisol/p/6673190.html" target="_blank" rel="external">用ReentrantLock和Condition实现线程间通信</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-jtp10264/index.h
    
    </summary>
    
      <category term="并发编程" scheme="http://wodekouwei.com/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://wodekouwei.com/tags/Java/"/>
    
      <category term="concurrent" scheme="http://wodekouwei.com/tags/concurrent/"/>
    
      <category term="并发" scheme="http://wodekouwei.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
</feed>
